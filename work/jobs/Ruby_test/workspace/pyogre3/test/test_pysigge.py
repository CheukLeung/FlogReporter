# ----------------------------------------------------------------
# test_pysigge.py - Unit test program for signals generated by pysigge
# ----------------------------------------------------------------
import ogre

import xxx_sig
#import shortlist

import unittest
import logging
import logging.config
import os

# ----------------------------------------------------------------
class TestPySigge(unittest.TestCase):

   def setUp(self):
      self.url = '%s://%s:%s' % (os.environ['OGRE_COMM'],
                                 os.environ['OGRE_NODE'],
                                 os.environ['OGRE_PORT'])
      self.conn = ogre.create(self.url, "testogre")
      #logging.info('Using URL: %s' % (self.url))


   def test_xxx(self):
      self.conn.hunt("ogre_echo")
      pid = self.conn.receive().sender()
      self.assertNotEqual(pid, 0);

      sig1 = xxx_sig.SIGNAL2()
      sig1.testValue1 = 47
      
      sig1.array1 = [ xxx_sig.dynamic1() for i in range(2) ]
      sig1.array1[0].testValue2 = 7
      sig1.array1[1].testValue2 = 17

      sig1.array1[0].array2 = [ xxx_sig.dynamic2() for i in range(3) ]
      sig1.array1[0].array2[0].testValue3 = 8
      sig1.array1[0].array2[0].array3 = [ 10,11,12 ]
      sig1.array1[0].array2[1].testValue3 = 18
      sig1.array1[0].array2[1].array3 = [ 20,21,22,23 ]
      sig1.array1[0].array2[2].testValue3 = 28
      sig1.array1[0].array2[2].array3 = [ 30,31,32,33,34 ]

      # TODO ..............

      self.conn.send(sig1, pid)
      sig2 = self.conn.receive()

      self.assertEqual(sig1.array1, sig2.array1)
      self.assertEqual(sig1, sig2)
      
   def disabled_test_shortlist(self):
      self.conn.hunt("ogre_echo")
      pid = self.conn.receive().sender()
      self.assertNotEqual(pid, 0);

      sig1 = shortlist.arr4ReqS()
      
      # TODO ..............
      # print sig1
      
      self.conn.send(sig1, pid)

      sig2 = self.conn.receive()
      self.assertEqual(sig1, sig2)

      
   def tearDown(self):
      self.conn.close()
      pass


# ----------------------------------------------------------------      
if __name__ == '__main__':
   logging.config.fileConfig('testlog.ini')
   #logging.getLogger('ogre').setLevel(logging.DEBUG)
   unittest.main()

# End of file
