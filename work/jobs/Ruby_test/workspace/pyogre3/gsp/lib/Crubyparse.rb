#
# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.5
# from racc grammer file "Crubyparse.y".
#

require 'racc/parser'



@@symbol_table    = { 'table_data' => [], 'quick_look' => {}, 'stack' => [], 'name' =>"SYMBOL table" }
@@structtag_table = { 'table_data' => [], 'quick_look' => {}, 'stack' => [], 'name' =>"STRUCT TAG table" }
@@uniontag_table  = { 'table_data' => [], 'quick_look' => {}, 'stack' => [], 'name' =>"UNION TAG table" }
@@enumtag_table   = { 'table_data' => [], 'quick_look' => {}, 'stack' => [], 'name' =>"ENUM TAG table" }
@@typedef_table   = { 'table_data' => [], 'quick_look' => {}, 'stack' => [], 'name' =>"TYPEDEF table" }

@@latest_token = ''
@@line_number = 1
@@inputarr = []



class Crubyparse < Racc::Parser

module_eval <<'..end Crubyparse.y modeval..id48c055d877', 'Crubyparse.y', 480

  #
  # Parser
  #
  def parse(input, options)

    @options = options
    @yydebug = true

    mode = "unreal"

    if mode == "unreal"
      @@inputarr = input.split(/\n/)
      @input = input
      do_parse
    else
      File.open("inputfile", "r") do |f|
        @input = f.readlines.join
        do_parse
      end
    end
    check_undefined
    return @@symbol_table, @@structtag_table, @@uniontag_table, @@enumtag_table, @@typedef_table

  end


  #
  # Lexer
  #
  def next_token
    a = []
  
    @lex_table = 
      [
       ['typedef\b',    :TYPEDEF],
       ['extern\b',     :EXTERN],
       ['static\b', 	:STATIC],
       ['auto\b', 	:AUTO],
       ['register\b', 	:REGISTER],
       ['char\b', 	:CHAR],
       ['short\b', 	:SHORT],
       ['int\b', 	:INT],
       ['long\b', 	:LONG],
       ['signed\b', 	:SIGNED],
       ['unsigned\b', 	:UNSIGNED],
       ['float\b', 	:FLOAT],
       ['double\b', 	:DOUBLE],
       ['const\b', 	:CONST],
       ['volatile\b', 	:VOLATILE],
       ['void\b', 	:VOID],
       ['struct\b', 	:STRUCT],
       ['union\b', 	:UNION],
       ['enum\b', 	:ENUM],
       ['\.\.\.', 	:ELLIPSIS],
       ['case\b', 	:CASE],
       ['default\b', 	:DEFAULT],
       ['if\b', 	:IF],
       ['else\b', 	:ELSE],
       ['switch\b', 	:SWITCH],
       ['while\b', 	:WHILE],
       ['do\b', 	:DO],
       ['for\b', 	:FOR],
       ['goto\b', 	:GOTO],
       ['continue\b', 	:CONTINUE],
       ['break\b', 	:BREAK],
       ['return\b', 	:RETURN],
       ['sizeof\b', 	:SIZEOF],
       ['0[xX][a-fA-F0-9]+',			   :CONSTANT], #hex constant
       ['0[0-9]+',				   :CONSTANT], #octal constant 
       ['(?=\d|\.\d)\d*(\.\d*)?([Ee]([+-]?\d+))?', :CONSTANT], #integer or floating point...
       ['"[^"]*"', 	:STRING_LITERAL], 
       ['->', 		:PTR_OP],
       ['\+\+', 	:INC_OP],
       ['--', 		:DEC_OP],
       ['<<', 		:LEFT_OP],
       ['>>', 		:RIGHT_OP],
       ['<=', 		:LE_OP],
       ['>=', 		:GE_OP],
       ['==', 		:EQ_OP],
       ['!=', 		:NE_OP],
       ['&&', 		:AND_OP],
       ['\|\|', 	:OR_OP],
       ['\*=', 		:MUL_ASSIGN],
       ['/=', 		:DIV_ASSIGN],
       ['%=', 		:MOD_ASSIGN],
       ['\+=', 		:ADD_ASSIGN],
       ['-=', 		:SUB_ASSIGN],
       ['<<=', 		:LEFT_ASSIGN],
       ['>>=', 		:RIGHT_ASSIGN],
       ['&=', 		:AND_ASSIGN],
       ['\^=', 		:XOR_ASSIGN],
       ['\|=', 		:OR_ASSIGN],
       ['[_a-zA-Z]\w*', :IDENTIFIER],
      ]

    # Advance line number if a newline is seen
    if @input.match(/\A\s*(\n)\s*/)
      @@line_number += 1
    end

    # Discard white space and newlines
    @input.sub!(/\A[\s\n]+/, '')

    # Check for empty input and end of input
    if @input.empty?
      if @@latest_token == ''
        raise ParseError, "ParseError: Empty input file, terminating"
      else
        puts "End of input" if @options.debug
        return [false, false]
      end
    end
    
    @found = false
    
    # Scan lex table for match
    @lex_table.each do |elem|
      if @input.sub!(/\A(#{elem[0]})/, '')
        a = [elem[1], $1]
        @found = true
        break
      end
    end
      
    # Assume token is first single char in input
    if !@found 
      if @input.sub!(/(\A.)/, '')
        a = [$1, $1]
      end
    end

    # If an identifier was found, but it is a typename defined in the 
    # typedef_table, change the symbol from :IDENTIFIER to :TYPE_NAME.
    # (STRUCT, UNION and ENUM can never be followed by a typename)

    unless @@latest_token.eql?'STRUCT' or @@latest_token.eql?'UNION' or @@latest_token.eql?'ENUM' 
      if a[0].is_a?(Symbol) and a[0].id2name.eql?'IDENTIFIER' and 
         get_table(@@typedef_table, $1) and @@latest_token != 'TYPE_NAME'
        a[0] = :TYPE_NAME
      end
    end

    if a[0].is_a?(Symbol)
      @@latest_token = a[0].id2name
    else
      @@latest_token = a[0]
    end

    return a

  end

  def on_error(t, val, vstack)
    puts "Error near line #{@@line_number} in \'trimmedcppfile\':"
    raise ParseError, sprintf("parse error on value %s (%s)",
                               val.inspect, token_to_str(t) || '?')
  end

..end Crubyparse.y modeval..id48c055d877

##### racc 1.4.5 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 1, 86, :_reduce_none,
 1, 86, :_reduce_2,
 1, 86, :_reduce_3,
 3, 86, :_reduce_4,
 1, 88, :_reduce_5,
 4, 88, :_reduce_none,
 3, 88, :_reduce_none,
 4, 88, :_reduce_none,
 3, 88, :_reduce_none,
 3, 88, :_reduce_none,
 2, 88, :_reduce_none,
 2, 88, :_reduce_none,
 1, 89, :_reduce_13,
 3, 89, :_reduce_none,
 1, 91, :_reduce_15,
 2, 91, :_reduce_16,
 2, 91, :_reduce_17,
 2, 91, :_reduce_18,
 2, 91, :_reduce_none,
 4, 91, :_reduce_none,
 1, 92, :_reduce_none,
 1, 92, :_reduce_none,
 1, 92, :_reduce_none,
 1, 92, :_reduce_none,
 1, 92, :_reduce_none,
 1, 92, :_reduce_none,
 1, 93, :_reduce_27,
 4, 93, :_reduce_28,
 1, 95, :_reduce_29,
 3, 95, :_reduce_30,
 3, 95, :_reduce_31,
 3, 95, :_reduce_32,
 1, 96, :_reduce_33,
 3, 96, :_reduce_34,
 3, 96, :_reduce_35,
 1, 97, :_reduce_36,
 3, 97, :_reduce_37,
 3, 97, :_reduce_38,
 1, 98, :_reduce_39,
 3, 98, :_reduce_40,
 3, 98, :_reduce_41,
 3, 98, :_reduce_42,
 3, 98, :_reduce_43,
 1, 99, :_reduce_44,
 3, 99, :_reduce_45,
 3, 99, :_reduce_46,
 1, 100, :_reduce_47,
 3, 100, :_reduce_48,
 1, 101, :_reduce_49,
 3, 101, :_reduce_50,
 1, 102, :_reduce_51,
 3, 102, :_reduce_52,
 1, 103, :_reduce_53,
 3, 103, :_reduce_54,
 1, 104, :_reduce_55,
 3, 104, :_reduce_56,
 1, 105, :_reduce_57,
 5, 105, :_reduce_58,
 1, 90, :_reduce_none,
 3, 90, :_reduce_none,
 1, 106, :_reduce_none,
 1, 106, :_reduce_none,
 1, 106, :_reduce_none,
 1, 106, :_reduce_none,
 1, 106, :_reduce_none,
 1, 106, :_reduce_none,
 1, 106, :_reduce_none,
 1, 106, :_reduce_none,
 1, 106, :_reduce_none,
 1, 106, :_reduce_none,
 1, 106, :_reduce_none,
 1, 87, :_reduce_none,
 3, 87, :_reduce_none,
 1, 107, :_reduce_74,
 2, 108, :_reduce_none,
 3, 108, :_reduce_76,
 1, 109, :_reduce_77,
 1, 111, :_reduce_78,
 2, 111, :_reduce_79,
 1, 111, :_reduce_80,
 2, 111, :_reduce_81,
 1, 111, :_reduce_82,
 2, 111, :_reduce_83,
 1, 110, :_reduce_84,
 3, 110, :_reduce_85,
 1, 115, :_reduce_86,
 3, 115, :_reduce_87,
 1, 112, :_reduce_88,
 1, 112, :_reduce_89,
 1, 112, :_reduce_90,
 1, 112, :_reduce_91,
 1, 112, :_reduce_92,
 1, 113, :_reduce_93,
 1, 113, :_reduce_94,
 2, 113, :_reduce_95,
 1, 113, :_reduce_96,
 1, 113, :_reduce_97,
 3, 113, :_reduce_98,
 2, 113, :_reduce_99,
 2, 113, :_reduce_100,
 1, 113, :_reduce_101,
 1, 113, :_reduce_102,
 2, 113, :_reduce_103,
 1, 113, :_reduce_104,
 1, 113, :_reduce_105,
 1, 113, :_reduce_106,
 1, 113, :_reduce_107,
 1, 113, :_reduce_108,
 1, 113, :_reduce_109,
 0, 122, :_reduce_110,
 6, 118, :_reduce_111,
 4, 118, :_reduce_112,
 2, 118, :_reduce_113,
 1, 120, :_reduce_114,
 1, 120, :_reduce_115,
 1, 121, :_reduce_116,
 2, 121, :_reduce_117,
 3, 123, :_reduce_118,
 1, 124, :_reduce_119,
 2, 126, :_reduce_120,
 1, 126, :_reduce_121,
 2, 126, :_reduce_122,
 1, 126, :_reduce_123,
 1, 125, :_reduce_124,
 3, 125, :_reduce_125,
 1, 127, :_reduce_126,
 2, 127, :_reduce_none,
 3, 127, :_reduce_none,
 4, 119, :_reduce_129,
 5, 119, :_reduce_130,
 2, 119, :_reduce_131,
 1, 128, :_reduce_132,
 3, 128, :_reduce_133,
 1, 129, :_reduce_134,
 3, 129, :_reduce_135,
 1, 114, :_reduce_136,
 1, 114, :_reduce_137,
 2, 116, :_reduce_138,
 1, 116, :_reduce_139,
 1, 131, :_reduce_140,
 3, 131, :_reduce_141,
 4, 131, :_reduce_142,
 3, 131, :_reduce_143,
 4, 131, :_reduce_144,
 4, 131, :_reduce_145,
 3, 131, :_reduce_146,
 1, 130, :_reduce_147,
 2, 130, :_reduce_148,
 2, 130, :_reduce_149,
 3, 130, :_reduce_150,
 1, 134, :_reduce_none,
 2, 134, :_reduce_none,
 1, 132, :_reduce_none,
 3, 132, :_reduce_none,
 1, 135, :_reduce_none,
 3, 135, :_reduce_none,
 2, 136, :_reduce_none,
 2, 136, :_reduce_none,
 1, 136, :_reduce_none,
 1, 133, :_reduce_none,
 3, 133, :_reduce_none,
 1, 94, :_reduce_none,
 2, 94, :_reduce_none,
 1, 137, :_reduce_none,
 1, 137, :_reduce_none,
 2, 137, :_reduce_none,
 3, 138, :_reduce_none,
 2, 138, :_reduce_none,
 3, 138, :_reduce_none,
 3, 138, :_reduce_none,
 4, 138, :_reduce_none,
 2, 138, :_reduce_none,
 3, 138, :_reduce_none,
 3, 138, :_reduce_none,
 4, 138, :_reduce_none,
 1, 117, :_reduce_none,
 3, 117, :_reduce_none,
 4, 117, :_reduce_none,
 1, 139, :_reduce_none,
 3, 139, :_reduce_none,
 1, 140, :_reduce_none,
 1, 140, :_reduce_none,
 1, 140, :_reduce_none,
 1, 140, :_reduce_none,
 1, 140, :_reduce_none,
 1, 140, :_reduce_none,
 3, 141, :_reduce_none,
 4, 141, :_reduce_none,
 3, 141, :_reduce_none,
 2, 142, :_reduce_none,
 3, 142, :_reduce_none,
 3, 142, :_reduce_none,
 4, 142, :_reduce_none,
 1, 148, :_reduce_none,
 2, 148, :_reduce_none,
 1, 147, :_reduce_none,
 2, 147, :_reduce_none,
 1, 143, :_reduce_none,
 2, 143, :_reduce_none,
 5, 144, :_reduce_none,
 7, 144, :_reduce_none,
 5, 144, :_reduce_none,
 5, 145, :_reduce_none,
 7, 145, :_reduce_none,
 6, 145, :_reduce_none,
 7, 145, :_reduce_none,
 3, 146, :_reduce_none,
 2, 146, :_reduce_none,
 2, 146, :_reduce_none,
 2, 146, :_reduce_none,
 3, 146, :_reduce_none,
 1, 85, :_reduce_212,
 2, 85, :_reduce_213,
 1, 149, :_reduce_none,
 1, 149, :_reduce_none,
 0, 151, :_reduce_216,
 5, 150, :_reduce_217,
 0, 152, :_reduce_218,
 4, 150, :_reduce_219,
 0, 153, :_reduce_220,
 4, 150, :_reduce_221,
 0, 154, :_reduce_222,
 3, 150, :_reduce_223 ]

racc_reduce_n = 224

racc_shift_n = 363

clist = [
'138,99,103,107,43,111,115,61,234,283,321,171,187,46,47,326,3,341,48',
'7,7,234,330,25,31,16,21,24,27,33,37,2,5,9,11,13,17,20,23,25,31,36,1',
'4,8,134,145,147,150,3,153,156,159,160,161,135,136,137,108,320,25,31',
'319,223,89,92,94,98,101,106,138,99,103,107,186,111,115,15,15,139,75',
'240,199,200,44,3,3,62,95,99,103,107,80,111,115,16,21,24,27,33,37,2,5',
'9,11,13,17,20,23,25,31,36,1,4,8,134,145,147,150,317,153,156,159,160',
'161,135,136,137,108,59,59,60,60,133,89,92,94,98,101,106,204,205,138',
'99,103,107,108,111,115,139,75,141,89,92,94,98,101,106,339,327,193,119',
'234,328,337,194,195,193,219,348,127,302,194,195,204,205,204,205,138',
'99,103,107,336,111,115,234,126,301,145,147,150,70,153,156,159,160,161',
'135,136,137,108,307,234,206,207,181,89,92,94,98,101,106,173,174,138',
'99,103,107,233,111,115,139,75,237,145,147,150,182,153,156,159,160,161',
'135,136,137,108,206,207,206,207,183,89,92,94,98,101,106,309,138,99,103',
'107,184,111,115,331,139,75,315,145,147,150,132,153,156,159,160,161,135',
'136,137,108,164,329,75,234,165,89,92,94,98,101,106,138,99,103,107,340',
'111,115,75,234,139,75,145,147,150,303,153,156,159,160,161,135,136,137',
'108,359,263,75,264,234,89,92,94,98,101,106,138,99,103,107,357,111,115',
'128,234,139,75,145,147,150,163,153,156,159,160,161,135,136,137,108,287',
'7,7,7,234,89,92,94,98,101,106,95,99,103,107,166,111,115,202,203,139',
'75,145,147,150,181,153,156,159,160,161,135,136,137,108,263,283,264,171',
'182,89,92,94,98,101,106,138,99,103,107,183,111,115,202,203,139,75,202',
'203,15,168,168,171,171,184,7,3,3,193,108,199,200,74,194,195,89,92,94',
'98,101,106,138,99,103,107,73,111,115,199,200,198,219,145,147,150,70',
'153,156,159,160,161,135,136,137,108,202,203,173,174,286,89,92,94,98',
'101,106,95,99,103,107,275,111,115,15,75,139,75,145,147,150,3,153,156',
'159,160,161,135,136,137,108,202,203,342,69,64,89,92,94,98,101,106,138',
'99,103,107,344,111,115,345,273,139,75,70,226,227,230,257,256,255,356',
'7,232,42,239,108,235,361,236,,,89,92,94,98,101,106,138,99,103,107,,111',
'115,,,,219,145,147,150,,153,156,159,160,161,135,136,137,108,,,,,,89',
'92,94,98,101,106,138,99,103,107,,111,115,15,,139,75,145,147,150,3,153',
'156,159,160,161,135,136,137,108,,,,,64,89,92,94,98,101,106,138,99,103',
'107,,111,115,,,139,75,145,147,150,,153,156,159,160,161,135,136,137,108',
',,,,,89,92,94,98,101,106,95,99,103,107,,111,115,,,139,75,145,147,150',
',153,156,159,160,161,135,136,137,108,,,,,,89,92,94,98,101,106,95,99',
'103,107,,111,115,,,139,75,,7,7,,,95,99,103,107,,111,115,108,,,,,,89',
'92,94,98,101,106,95,99,103,107,,111,115,,,139,,,95,99,103,107,,111,115',
',,,,108,,,,,,89,92,94,98,101,106,15,15,,,108,,,3,3,228,89,92,94,98,101',
'106,,,,212,212,,,108,,139,,,,89,92,94,98,101,106,108,176,177,179,,,89',
'92,94,98,101,106,95,99,103,107,,111,115,,,,,,95,99,103,107,,111,115',
',,,,,95,99,103,107,,111,115,,,,,,95,99,103,107,,111,115,175,,178,,180',
'95,99,103,107,,111,115,,,,108,,,,,,89,92,94,98,101,106,108,,,,,,89,92',
'94,98,101,106,108,,,,,,89,92,94,98,101,106,108,,,,,,89,92,94,98,101',
'106,108,,,,,,89,92,94,98,101,106,95,99,103,107,,111,115,,,,,,95,99,103',
'107,,111,115,,,,,,95,99,103,107,,111,115,,,,,,95,99,103,107,,111,115',
',,,,,95,99,103,107,,111,115,,,,108,,,,,,89,92,94,98,101,106,108,,,,',
',89,92,94,98,101,106,108,,,,,,89,92,94,98,101,106,108,,,,,,89,92,94',
'98,101,106,108,,,,,,89,92,94,98,101,106,95,99,103,107,,111,115,,,,,',
'95,99,103,107,,111,115,,,,,,95,99,103,107,,111,115,,,,,,95,99,103,107',
',111,115,,,,,,95,99,103,107,,111,115,,,,108,,,,,,89,92,94,98,101,106',
'108,,,,,,89,92,94,98,101,106,108,,,,,,89,92,94,98,101,106,108,,,,,,89',
'92,94,98,101,106,108,,,,,,89,92,94,98,101,106,95,99,103,107,,111,115',
',,,,,95,99,103,107,,111,115,,,,,,95,99,103,107,,111,115,,,,,,95,99,103',
'107,,111,115,,,,,,95,99,103,107,,111,115,,,,108,,,,,,89,92,94,98,101',
'106,108,,,,,,89,92,94,98,101,106,108,,,,,,89,92,94,98,101,106,108,,',
',,,89,92,94,98,101,106,108,,,112,,,89,92,94,98,101,106,95,99,103,107',
',111,115,,,,,,95,99,103,107,,111,115,,,,,,,,,,95,99,103,107,,111,115',
',,,,248,249,251,252,253,242,243,244,245,247,,,,,,,,,,108,354,,,,,89',
'92,94,98,101,106,189,,,,,,89,92,94,98,101,106,95,99,103,107,108,111',
'115,266,,,89,92,94,98,101,106,95,99,103,107,246,111,115,,,16,,,,,,2',
'5,9,11,13,17,20,23,25,31,36,1,4,8,95,99,103,107,,111,115,,,,,,,108,',
',,,,89,92,94,98,101,106,,,,,197,,,,,,89,92,94,98,101,106,,,,,95,99,103',
'107,,111,115,,,,,,,108,,,,,,89,92,94,98,101,106,16,,,,,,2,5,9,11,13',
'17,20,23,25,31,36,1,4,8,95,99,103,107,,111,115,,,,,,,108,,,,,,89,92',
'94,98,101,106,95,99,103,107,,111,115,,,,,,95,99,103,107,,111,115,,,',
',,95,99,103,107,,111,115,,,197,,,,,,89,92,94,98,101,106,95,99,103,107',
',111,115,,,,,,,108,,,,,,89,92,94,98,101,106,108,,,,,,89,92,94,98,101',
'106,108,,,,,,89,92,94,98,101,106,95,99,103,107,,111,115,,,108,,,,,,89',
'92,94,98,101,106,95,99,103,107,,111,115,,,,,,95,99,103,107,,111,115',
',,,,,95,99,103,107,,111,115,,,,,,,108,,,325,,,89,92,94,98,101,106,95',
'99,103,107,,111,115,,,108,,,,,,89,92,94,98,101,106,108,,,,,,89,92,94',
'98,101,106,108,,,,,,89,92,94,98,101,106,95,99,103,107,,111,115,,,,,',
',108,,,,,,89,92,94,98,101,106,95,99,103,107,,111,115,,,,,,95,99,103',
'107,,111,115,,,,,,95,99,103,107,,111,115,,,108,,,,,,89,92,94,98,101',
'106,95,99,103,107,,111,115,,,,,,,108,272,,,,,89,92,94,98,101,106,108',
',,,,,89,92,94,98,101,106,108,,,,,,89,92,94,98,101,106,95,99,103,107',
',111,115,,,108,56,,7,,,89,92,94,98,101,106,,,,,,,,,,,,,,,,,16,21,24',
'27,33,37,2,5,9,11,13,17,20,23,25,31,36,1,4,8,7,108,,,,,,89,92,94,98',
'101,106,15,,,,,,,3,,,,,16,21,24,27,33,37,2,5,9,11,13,17,20,23,25,31',
'36,1,4,8,7,,,,,,,,,,,,,168,262,171,,,,,3,,,,,16,21,24,27,33,37,2,5,9',
'11,13,17,20,23,25,31,36,1,4,8,83,,,,,,,,,,,,,15,,,,,,,3,,,,,16,21,24',
'27,33,37,2,5,9,11,13,17,20,23,25,31,36,1,4,8,,,,,,,,,,16,,,,,86,2,5',
'9,11,13,17,20,23,25,31,36,1,4,8,16,,,,,,2,5,9,11,13,17,20,23,25,31,36',
'1,4,8,,,,,,,,,,,,16,,,,,210,2,5,9,11,13,17,20,23,25,31,36,1,4,8,,,,',
',333,16,21,24,27,33,37,2,5,9,11,13,17,20,23,25,31,36,1,4,8,,,,16,21',
'24,27,33,37,2,5,9,11,13,17,20,23,25,31,36,1,4,8,,,,,,,,,,,128,,-218',
'283,262,171,,,,,3,16,21,24,27,33,37,2,5,9,11,13,17,20,23,25,31,36,1',
'4,8,,,,,,,,,,,,,,,323,16,21,24,27,33,37,2,5,9,11,13,17,20,23,25,31,36',
'1,4,8,258,16,21,24,27,33,37,2,5,9,11,13,17,20,23,25,31,36,1,4,8,16,21',
'24,27,33,37,2,5,9,11,13,17,20,23,25,31,36,1,4,8,16,21,24,27,33,37,2',
'5,9,11,13,17,20,23,25,31,36,1,4,8,16,,,,,,2,5,9,11,13,17,20,23,25,31',
'36,1,4,8,16,,,,,,2,5,9,11,13,17,20,23,25,31,36,1,4,8,16,21,24,27,33',
'37,2,5,9,11,13,17,20,23,25,31,36,1,4,8,16,,,,,,2,5,9,11,13,17,20,23',
'25,31,36,1,4,8,16,21,24,27,33,37,2,5,9,11,13,17,20,23,25,31,36,1,4,8',
'16,21,24,27,33,37,2,5,9,11,13,17,20,23,25,31,36,1,4,8' ]
racc_action_table = arr = Array.new(2406, nil)
str = a = i = nil
idx = 0
clist.each do |str|
  str.split(',', -1).each do |i|
    arr[idx] = i.to_i unless i.empty?
    idx += 1
  end
end

clist = [
'157,157,157,157,8,157,157,35,280,190,261,190,104,11,11,265,190,314,11',
'30,15,314,280,3,3,157,157,157,157,157,157,157,157,157,157,157,157,157',
'157,157,157,157,157,157,157,131,157,157,157,3,157,157,157,157,157,157',
'157,157,157,260,39,39,256,131,157,157,157,157,157,157,75,75,75,75,104',
'75,75,30,15,157,157,157,114,114,8,15,39,35,337,337,337,337,56,337,337',
'75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,71,75,75',
'75,254,75,75,75,75,75,75,75,75,75,58,34,58,34,71,75,75,75,75,75,75,268',
'268,154,154,154,154,337,154,154,75,75,75,337,337,337,337,337,337,312',
'270,291,61,312,270,305,291,291,110,337,337,63,213,110,110,118,118,269',
'269,241,241,241,241,305,241,241,229,63,213,154,154,154,69,154,154,154',
'154,154,154,154,154,154,229,148,268,268,277,154,154,154,154,154,154',
'276,276,339,339,339,339,148,339,339,154,154,154,241,241,241,278,241',
'241,241,241,241,241,241,241,241,118,118,269,269,279,241,241,241,241',
'241,241,231,341,341,341,341,281,341,341,282,241,241,241,339,339,339',
'70,339,339,339,339,339,339,339,339,339,82,274,221,274,82,339,339,339',
'339,339,339,340,340,340,340,313,340,340,52,313,339,339,341,341,341,214',
'341,341,341,341,341,341,341,341,341,355,267,78,267,355,341,341,341,341',
'341,341,159,159,159,159,353,159,159,79,353,341,341,340,340,340,81,340',
'340,340,340,340,340,340,340,340,192,127,87,172,192,340,340,340,340,340',
'340,128,128,128,128,84,128,128,116,116,340,340,159,159,159,91,159,159',
'159,159,159,159,159,159,159,169,285,169,285,93,159,159,159,159,159,159',
'354,354,354,354,96,354,354,298,298,159,159,296,296,127,87,172,87,172',
'100,38,127,87,292,128,293,293,51,292,292,128,128,128,128,128,128,356',
'356,356,356,47,356,356,294,294,113,128,354,354,354,44,354,354,354,354',
'354,354,354,354,354,295,295,88,88,191,354,354,354,354,354,354,219,219',
'219,219,180,219,219,38,130,354,354,356,356,356,38,356,356,356,356,356',
'356,356,356,356,297,297,317,43,38,356,356,356,356,356,356,230,230,230',
'230,322,230,230,324,176,356,356,134,135,136,138,165,161,160,350,55,147',
'5,156,219,150,357,153,,,219,219,219,219,219,219,232,232,232,232,,232',
'232,,,,219,230,230,230,,230,230,230,230,230,230,230,230,230,,,,,,230',
'230,230,230,230,230,309,309,309,309,,309,309,55,,230,230,232,232,232',
'55,232,232,232,232,232,232,232,232,232,,,,,55,232,232,232,232,232,232',
'359,359,359,359,,359,359,,,232,232,309,309,309,,309,309,309,309,309',
'309,309,309,309,,,,,,309,309,309,309,309,309,318,318,318,318,,318,318',
',,309,309,359,359,359,,359,359,359,359,359,359,359,359,359,,,,,,359',
'359,359,359,359,359,137,137,137,137,,137,137,,,359,359,,123,302,,,255',
'255,255,255,,255,255,318,,,,,,318,318,318,318,318,318,102,102,102,102',
',102,102,,,318,,,239,239,239,239,,239,239,,,,,137,,,,,,137,137,137,137',
'137,137,123,302,,,255,,,123,302,137,255,255,255,255,255,255,,,,123,302',
',,102,,255,,,,102,102,102,102,102,102,239,90,90,90,,,239,239,239,239',
'239,239,236,236,236,236,,236,236,,,,,,235,235,235,235,,235,235,,,,,',
'234,234,234,234,,234,234,,,,,,303,303,303,303,,303,303,90,,90,,90,328',
'328,328,328,,328,328,,,,236,,,,,,236,236,236,236,236,236,235,,,,,,235',
'235,235,235,235,235,234,,,,,,234,234,234,234,234,234,303,,,,,,303,303',
'303,303,303,303,328,,,,,,328,328,328,328,328,328,250,250,250,250,,250',
'250,,,,,,330,330,330,330,,330,330,,,,,,212,212,212,212,,212,212,,,,',
',207,207,207,207,,207,207,,,,,,206,206,206,206,,206,206,,,,250,,,,,',
'250,250,250,250,250,250,330,,,,,,330,330,330,330,330,330,212,,,,,,212',
'212,212,212,212,212,207,,,,,,207,207,207,207,207,207,206,,,,,,206,206',
'206,206,206,206,205,205,205,205,,205,205,,,,,,204,204,204,204,,204,204',
',,,,,186,186,186,186,,186,186,,,,,,203,203,203,203,,203,203,,,,,,202',
'202,202,202,,202,202,,,,205,,,,,,205,205,205,205,205,205,204,,,,,,204',
'204,204,204,204,204,186,,,,,,186,186,186,186,186,186,203,,,,,,203,203',
'203,203,203,203,202,,,,,,202,202,202,202,202,202,200,200,200,200,,200',
'200,,,,,,199,199,199,199,,199,199,,,,,,197,197,197,197,,197,197,,,,',
',195,195,195,195,,195,195,,,,,,60,60,60,60,,60,60,,,,200,,,,,,200,200',
'200,200,200,200,199,,,,,,199,199,199,199,199,199,197,,,,,,197,197,197',
'197,197,197,195,,,,,,195,195,195,195,195,195,60,,,60,,,60,60,60,60,60',
'60,343,343,343,343,,343,343,,,,,,107,107,107,107,,107,107,,,,,,,,,,171',
'171,171,171,,171,171,,,,,158,158,158,158,158,158,158,158,158,158,,,',
',,,,,,343,343,,,,,343,343,343,343,343,343,107,,,,,,107,107,107,107,107',
'107,108,108,108,108,171,108,108,171,,,171,171,171,171,171,171,111,111',
'111,111,158,111,111,,,108,,,,,,108,108,108,108,108,108,108,108,108,108',
'108,108,108,108,193,193,193,193,,193,193,,,,,,,108,,,,,,108,108,108',
'108,108,108,,,,,111,,,,,,111,111,111,111,111,111,,,,,189,189,189,189',
',189,189,,,,,,,193,,,,,,193,193,193,193,193,193,189,,,,,,189,189,189',
'189,189,189,189,189,189,189,189,189,189,189,115,115,115,115,,115,115',
',,,,,,189,,,,,,189,189,189,189,189,189,187,187,187,187,,187,187,,,,',
',145,145,145,145,,145,145,,,,,,184,184,184,184,,184,184,,,115,,,,,,115',
'115,115,115,115,115,183,183,183,183,,183,183,,,,,,,187,,,,,,187,187',
'187,187,187,187,145,,,,,,145,145,145,145,145,145,184,,,,,,184,184,184',
'184,184,184,264,264,264,264,,264,264,,,183,,,,,,183,183,183,183,183',
'183,182,182,182,182,,182,182,,,,,,286,286,286,286,,286,286,,,,,,342',
'342,342,342,,342,342,,,,,,,264,,,264,,,264,264,264,264,264,264,181,181',
'181,181,,181,181,,,182,,,,,,182,182,182,182,182,182,286,,,,,,286,286',
'286,286,286,286,342,,,,,,342,342,342,342,342,342,178,178,178,178,,178',
'178,,,,,,,181,,,,,,181,181,181,181,181,181,175,175,175,175,,175,175',
',,,,,132,132,132,132,,132,132,,,,,,174,174,174,174,,174,174,,,178,,',
',,,178,178,178,178,178,178,173,173,173,173,,173,173,,,,,,,175,175,,',
',,175,175,175,175,175,175,132,,,,,,132,132,132,132,132,132,174,,,,,',
'174,174,174,174,174,174,194,194,194,194,,194,194,,,173,28,,28,,,173',
'173,173,173,173,173,,,,,,,,,,,,,,,,,28,28,28,28,28,28,28,28,28,28,28',
'28,28,28,28,28,28,28,28,28,168,194,,,,,,194,194,194,194,194,194,28,',
',,,,,28,,,,,168,168,168,168,168,168,168,168,168,168,168,168,168,168',
'168,168,168,168,168,168,0,,,,,,,,,,,,,168,168,168,,,,,168,,,,,0,0,0',
'0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,59,,,,,,,,,,,,,0,,,,,,,0,,,,,59,59',
'59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,,,,,,,,,,120,',
',,,59,120,120,120,120,120,120,120,120,120,120,120,120,120,120,299,,',
',,,299,299,299,299,299,299,299,299,299,299,299,299,299,299,,,,,,,,,',
',,208,,,,,120,208,208,208,208,208,208,208,208,208,208,208,208,208,208',
',,,,,299,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66',
',,,283,283,283,283,283,283,283,283,283,283,283,283,283,283,283,283,283',
'283,283,283,,,,,,,,,,,66,,66,283,283,283,,,,,283,263,263,263,263,263',
'263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,,,,,,,,',
',,,,,,263,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166',
'166,166,166,166,166,166,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18',
'18,18,18,18,18,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14',
'14,14,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129',
'129,129,129,129,124,,,,,,124,124,124,124,124,124,124,124,124,124,124',
'124,124,124,122,,,,,,122,122,122,122,122,122,122,122,122,122,122,122',
'122,122,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12',
'62,,,,,,62,62,62,62,62,62,62,62,62,62,62,62,62,62,10,10,10,10,10,10',
'10,10,10,10,10,10,10,10,10,10,10,10,10,10,53,53,53,53,53,53,53,53,53',
'53,53,53,53,53,53,53,53,53,53,53' ]
racc_action_check = arr = Array.new(2406, nil)
str = a = i = nil
idx = 0
clist.each do |str|
  str.split(',', -1).each do |i|
    arr[idx] = i.to_i unless i.empty?
    idx += 1
  end
end

racc_action_pointer = [
  1928,   nil,   nil,   -18,   nil,   480,   nil,   nil,     2,   nil,
  2339,   -22,  2299,   nil,  2219,    18,   nil,   nil,  2199,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1838,   nil,
    17,   nil,   nil,   nil,    70,     5,   nil,   nil,   406,    19,
   nil,   nil,   nil,   404,   436,   nil,   nil,   393,   nil,   nil,
   nil,   354,   209,  2359,   nil,   511,    92,   nil,    69,  1973,
  1186,    79,  2319,   105,   nil,   nil,  2079,   nil,   nil,   189,
   183,    50,   nil,   nil,   nil,    68,   nil,   nil,   228,   246,
   nil,   272,   212,   nil,   293,   nil,   nil,   343,   437,   nil,
   769,   302,   nil,   306,   nil,   nil,   316,   nil,   nil,   nil,
   392,   nil,   702,   nil,    -4,   nil,   nil,  1268,  1338,   nil,
   100,  1354,   nil,   370,    14,  1473,   352,   nil,   163,   nil,
  2002,   nil,  2279,   679,  2259,   nil,   nil,   342,   352,  2239,
   385,   -20,  1744,   nil,   503,   425,   426,   667,   429,   nil,
   nil,   nil,   nil,   nil,   nil,  1510,   nil,   435,   137,   nil,
   458,   nil,   nil,   460,   140,   nil,   456,    -2,  1280,   317,
   451,   508,   nil,   nil,   nil,   507,  2178,   nil,  1883,   318,
   nil,  1284,   344,  1777,  1756,  1732,   500,   nil,  1707,   nil,
   461,  1662,  1613,  1543,  1522,   nil,  1044,  1498,   nil,  1428,
   -51,   391,   282,  1383,  1826,  1174,   nil,  1162,   nil,  1150,
  1138,   nil,  1068,  1056,  1032,  1020,   950,   938,  2053,   nil,
   nil,   nil,   926,   106,   219,   nil,   nil,   nil,   nil,   457,
   nil,   193,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   120,
   492,   169,   527,   nil,   808,   796,   784,   nil,   nil,   714,
   nil,   176,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   902,   nil,   nil,   nil,    66,   683,   -19,   nil,   nil,   nil,
    -2,   -51,   nil,  2143,  1592,   -48,   nil,   249,   129,   165,
    98,   nil,   nil,   nil,   211,   nil,   199,   139,   151,   164,
   -57,   238,   195,  2102,   nil,   319,  1625,   nil,   nil,   nil,
   nil,    93,   344,   345,   363,   439,   391,   474,   387,  2022,
   nil,   nil,   680,   820,   nil,    99,   nil,   nil,   nil,   562,
   nil,   nil,    97,   227,   -44,   nil,   nil,   425,   632,   nil,
   nil,   nil,   437,   nil,   438,   nil,   nil,   nil,   832,   nil,
   914,   nil,   nil,   nil,   nil,   nil,   nil,    86,   nil,   212,
   282,   247,  1637,  1256,   nil,   nil,   nil,   nil,   nil,   nil,
   461,   nil,   nil,   262,   387,   247,   422,   438,   nil,   597,
   nil,   nil,   nil ]

racc_action_default = [
  -224,  -114,   -94,  -147,  -115,   -96,   -77,  -140,  -224,   -97,
   -78,  -101,   -80,  -105,   -82,  -224,  -109,  -106,  -222,  -212,
  -102,   -88,  -214,  -104,   -89,  -136,  -107,   -90,  -224,  -215,
  -224,  -137,  -108,   -91,  -139,  -224,   -93,   -92,  -224,  -148,
  -151,  -149,   -95,  -131,  -224,   -79,  -100,   -99,  -103,   -81,
   -83,  -224,  -224,  -220,  -194,  -224,  -224,  -213,  -138,  -224,
  -224,  -113,  -224,  -224,   -75,   -84,   -86,  -152,  -150,  -224,
  -134,  -224,  -132,   -98,  -141,  -224,  -223,  -195,  -224,   -86,
   363,  -224,  -224,  -160,  -153,  -155,  -146,  -159,   -47,   -21,
   -15,   -49,   -22,   -51,   -23,    -1,   -53,   -27,   -24,    -2,
   -55,   -25,  -224,    -3,   -57,   -29,   -26,  -224,  -224,   -74,
   -33,  -224,  -143,  -224,   -36,  -224,   -39,    -5,   -44,  -110,
  -224,  -116,  -121,  -224,  -123,  -119,   -76,  -224,  -224,  -216,
  -224,  -224,  -224,  -129,  -224,  -224,  -224,  -224,    -1,  -198,
  -196,  -190,  -181,  -182,   -59,  -224,  -183,  -224,  -224,  -184,
  -224,  -185,  -186,  -224,  -224,   -72,  -224,  -224,   -27,  -224,
  -224,  -224,  -221,  -144,  -145,  -224,  -224,  -158,  -224,  -165,
  -157,  -224,  -164,  -224,  -224,  -224,  -224,   -11,  -224,   -12,
  -224,  -224,  -224,  -224,  -224,   -18,  -224,  -224,   -19,  -224,
  -162,  -224,  -224,  -224,  -224,  -224,   -16,  -224,  -142,  -224,
  -224,   -17,  -224,  -224,  -224,  -224,  -224,  -224,  -224,  -117,
  -112,  -120,  -224,  -224,  -126,  -124,  -122,   -85,  -176,  -224,
   -87,  -224,  -219,  -130,  -135,  -133,  -208,  -209,  -210,  -224,
  -224,  -224,  -224,  -199,  -224,  -224,  -224,  -191,  -197,  -224,
  -192,  -224,   -67,   -68,   -69,   -70,   -61,   -71,   -62,   -63,
  -224,   -64,   -65,   -66,  -224,  -224,  -224,  -161,  -154,  -156,
  -224,  -224,  -172,  -224,  -224,  -224,  -168,  -166,   -45,   -46,
  -224,   -13,    -7,   -10,  -224,    -9,   -48,   -50,   -52,   -54,
  -224,   -56,  -224,  -224,  -163,  -164,  -224,    -4,   -30,   -31,
   -32,   -34,   -35,   -37,   -38,   -42,   -43,   -40,   -41,  -224,
  -127,  -118,  -224,  -224,  -179,  -224,  -217,  -211,  -187,  -224,
  -189,   -73,  -224,  -224,  -224,  -193,   -60,  -224,  -224,  -207,
  -173,  -167,  -224,  -174,  -224,  -170,  -169,    -8,  -224,    -6,
  -224,   -20,   -28,  -111,  -125,  -128,  -177,  -224,  -188,  -224,
  -224,  -224,  -224,  -224,  -175,  -171,   -14,   -58,  -178,  -180,
  -200,  -202,  -203,  -224,  -224,  -224,  -224,  -224,  -205,  -224,
  -201,  -204,  -206 ]

racc_goto_table = [
    40,    51,    38,   215,    41,   122,    81,   154,   209,   109,
   220,   113,    76,    97,   192,   267,   120,   318,    53,   185,
   167,   238,    58,   190,    66,   191,   254,   218,    19,    45,
    38,    49,    71,    50,    28,   211,    67,   216,   162,   213,
    68,    79,   208,   229,   295,   296,   297,   298,   291,   292,
   225,   122,   268,   269,    29,    97,    57,   131,    82,   124,
   188,    87,    39,   122,   196,   122,   129,   122,   201,   293,
   294,   259,   217,   170,   271,   157,   250,   305,   281,   279,
   343,   109,    29,   224,   274,    97,   278,   277,   172,   241,
   222,   276,   280,   270,   109,   192,   231,   308,    97,   310,
   221,   304,   130,   192,   190,   124,   282,    77,   238,   214,
   288,   289,   290,    79,    78,    52,   nil,   124,   218,   124,
   109,   124,   265,   284,    97,   nil,    97,    97,   267,   nil,
   nil,   nil,   122,   311,    97,    97,    97,    97,   nil,   nil,
    97,   312,   313,   nil,   nil,   314,    97,    97,    97,   316,
   nil,   122,    97,    97,    51,    97,    97,    97,    97,    97,
    97,   109,   299,   300,    58,    97,   nil,   nil,    87,   172,
    87,   nil,   nil,   nil,   nil,   nil,   338,   nil,   nil,   nil,
   nil,   306,   334,    77,   nil,   nil,   124,   209,   nil,   nil,
   nil,   285,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   332,   nil,   124,   350,   351,   352,   nil,
   322,    77,   nil,   109,   nil,   324,   nil,    97,   nil,   349,
   nil,   358,   nil,   360,   nil,   nil,   362,   346,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   218,   nil,   nil,    97,
   nil,   nil,   122,   nil,   nil,   nil,   nil,   nil,   353,   355,
   nil,   nil,   109,   nil,   335,   nil,    97,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    87,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   347,
   nil,   nil,   nil,    97,   285,    87,   nil,   nil,   214,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   124 ]

racc_goto_check = [
    30,    32,    25,    43,    46,    29,    48,    63,    39,    21,
    33,    23,    58,     7,     3,    54,    37,    59,    64,     9,
    53,    56,    47,    40,    32,    10,    56,     6,    65,    27,
    25,    27,    44,    27,     1,    42,    30,    42,    58,    41,
    46,    32,    38,     3,    13,    13,    13,    13,    11,    11,
    45,    29,    14,    14,    24,     7,    65,    44,    49,    30,
     7,    25,    50,    29,     7,    29,    64,    29,     7,    12,
    12,    52,    31,    32,     6,    64,    22,    55,    19,    18,
    59,    21,    24,    23,     3,     7,    17,    16,    46,    63,
    58,    15,     3,     5,    21,     3,    23,    56,     7,    56,
    67,    33,    68,     3,    40,    30,    10,    24,    56,    32,
     9,     9,     9,    32,    69,    70,   nil,    30,     6,    30,
    21,    30,    23,    53,     7,   nil,     7,     7,    54,   nil,
   nil,   nil,    29,     6,     7,     7,     7,     7,   nil,   nil,
     7,     3,     3,   nil,   nil,     3,     7,     7,     7,     6,
   nil,    29,     7,     7,    32,     7,     7,     7,     7,     7,
     7,    21,    37,    23,    47,     7,   nil,   nil,    25,    46,
    25,   nil,   nil,   nil,   nil,   nil,    56,   nil,   nil,   nil,
   nil,    58,    43,    24,   nil,   nil,    30,    39,   nil,   nil,
   nil,    46,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     9,   nil,    30,    56,    56,    56,   nil,
    48,    24,   nil,    21,   nil,    23,   nil,     7,   nil,    33,
   nil,    56,   nil,    56,   nil,   nil,    56,     6,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     6,   nil,   nil,     7,
   nil,   nil,    29,   nil,   nil,   nil,   nil,   nil,     3,     3,
   nil,   nil,    21,   nil,    23,   nil,     7,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    25,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    21,
   nil,   nil,   nil,     7,    46,    25,   nil,   nil,    32,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    30 ]

racc_goto_pointer = [
   nil,    34,   nil,   -94,   nil,   -82,  -101,   -47,   nil,   -83,
   -83,  -151,  -133,  -160,  -121,   -90,   -95,   -97,  -105,  -109,
   nil,   -51,   -82,   -49,    54,     2,   nil,    19,   nil,   -57,
    -3,   -55,   -14,  -118,   nil,   nil,   nil,   -46,   -77,  -112,
   -85,   -84,   -87,  -120,   -12,   -84,     1,    -8,   -53,    -1,
    59,   nil,   -95,   -67,  -157,  -142,  -133,   nil,   -40,  -238,
   nil,   nil,   nil,   -68,     0,    28,   nil,   -29,    36,    61,
    97 ]

racc_goto_default = [
   nil,   nil,   117,   148,    90,   nil,   155,   158,   102,   105,
   nil,   110,   114,   116,   118,    88,    91,    93,    96,   100,
   104,   144,   nil,   nil,    54,    55,    63,     6,    10,    12,
    14,    65,    18,   nil,    26,    32,    35,   nil,   nil,   121,
   123,   nil,   125,   nil,   nil,    72,    30,    34,   260,   nil,
   nil,    84,    85,   261,   169,   nil,   140,   142,   143,   146,
   149,   151,   152,   nil,   nil,   nil,    22,   nil,   nil,   nil,
   nil ]

racc_token_table = {
 false => 0,
 Object.new => 1,
 :IDENTIFIER => 2,
 :CONSTANT => 3,
 :STRING_LITERAL => 4,
 :SIZEOF => 5,
 :PTR_OP => 6,
 :INC_OP => 7,
 :DEC_OP => 8,
 :LEFT_OP => 9,
 :RIGHT_OP => 10,
 :LE_OP => 11,
 :GE_OP => 12,
 :EQ_OP => 13,
 :NE_OP => 14,
 :AND_OP => 15,
 :OR_OP => 16,
 :MUL_ASSIGN => 17,
 :DIV_ASSIGN => 18,
 :MOD_ASSIGN => 19,
 :ADD_ASSIGN => 20,
 :SUB_ASSIGN => 21,
 :LEFT_ASSIGN => 22,
 :RIGHT_ASSIGN => 23,
 :AND_ASSIGN => 24,
 :XOR_ASSIGN => 25,
 :OR_ASSIGN => 26,
 :TYPE_NAME => 27,
 :TYPEDEF => 28,
 :EXTERN => 29,
 :STATIC => 30,
 :AUTO => 31,
 :REGISTER => 32,
 :CHAR => 33,
 :SHORT => 34,
 :INT => 35,
 :LONG => 36,
 :SIGNED => 37,
 :UNSIGNED => 38,
 :FLOAT => 39,
 :DOUBLE => 40,
 :CONST => 41,
 :VOLATILE => 42,
 :VOID => 43,
 :STRUCT => 44,
 :UNION => 45,
 :ENUM => 46,
 :ELLIPSIS => 47,
 :CASE => 48,
 :DEFAULT => 49,
 :IF => 50,
 :ELSE => 51,
 :SWITCH => 52,
 :WHILE => 53,
 :DO => 54,
 :FOR => 55,
 :GOTO => 56,
 :CONTINUE => 57,
 :BREAK => 58,
 :RETURN => 59,
 "(" => 60,
 ")" => 61,
 "[" => 62,
 "]" => 63,
 "." => 64,
 "," => 65,
 "&" => 66,
 "*" => 67,
 "+" => 68,
 "-" => 69,
 "~" => 70,
 "!" => 71,
 "/" => 72,
 "%" => 73,
 "<" => 74,
 ">" => 75,
 "^" => 76,
 "|" => 77,
 "?" => 78,
 ":" => 79,
 "=" => 80,
 ";" => 81,
 "{" => 82,
 "}" => 83 }

racc_use_result_var = true

racc_nt_base = 84

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'IDENTIFIER',
'CONSTANT',
'STRING_LITERAL',
'SIZEOF',
'PTR_OP',
'INC_OP',
'DEC_OP',
'LEFT_OP',
'RIGHT_OP',
'LE_OP',
'GE_OP',
'EQ_OP',
'NE_OP',
'AND_OP',
'OR_OP',
'MUL_ASSIGN',
'DIV_ASSIGN',
'MOD_ASSIGN',
'ADD_ASSIGN',
'SUB_ASSIGN',
'LEFT_ASSIGN',
'RIGHT_ASSIGN',
'AND_ASSIGN',
'XOR_ASSIGN',
'OR_ASSIGN',
'TYPE_NAME',
'TYPEDEF',
'EXTERN',
'STATIC',
'AUTO',
'REGISTER',
'CHAR',
'SHORT',
'INT',
'LONG',
'SIGNED',
'UNSIGNED',
'FLOAT',
'DOUBLE',
'CONST',
'VOLATILE',
'VOID',
'STRUCT',
'UNION',
'ENUM',
'ELLIPSIS',
'CASE',
'DEFAULT',
'IF',
'ELSE',
'SWITCH',
'WHILE',
'DO',
'FOR',
'GOTO',
'CONTINUE',
'BREAK',
'RETURN',
'"("',
'")"',
'"["',
'"]"',
'"."',
'","',
'"&"',
'"*"',
'"+"',
'"-"',
'"~"',
'"!"',
'"/"',
'"%"',
'"<"',
'">"',
'"^"',
'"|"',
'"?"',
'":"',
'"="',
'";"',
'"{"',
'"}"',
'$start',
'translation_unit',
'primary_expression',
'expression',
'postfix_expression',
'argument_expression_list',
'assignment_expression',
'unary_expression',
'unary_operator',
'cast_expression',
'type_name',
'multiplicative_expression',
'additive_expression',
'shift_expression',
'relational_expression',
'equality_expression',
'and_expression',
'exclusive_or_expression',
'inclusive_or_expression',
'logical_and_expression',
'logical_or_expression',
'conditional_expression',
'assignment_operator',
'constant_expression',
'declaration',
'declaration_specifiers',
'init_declarator_list',
'declaration_specifiers_base',
'storage_class_specifier',
'type_specifier',
'type_qualifier',
'init_declarator',
'declarator',
'initializer',
'struct_or_union_specifier',
'enum_specifier',
'struct_or_union',
'struct_declaration_list',
'@1',
'struct_declaration',
'specifier_qualifier_list',
'struct_declarator_list',
'specifier_qualifier_list_base',
'struct_declarator',
'enumerator_list',
'enumerator',
'pointer',
'direct_declarator',
'parameter_type_list',
'identifier_list',
'type_qualifier_list',
'parameter_list',
'parameter_declaration',
'abstract_declarator',
'direct_abstract_declarator',
'initializer_list',
'statement',
'labeled_statement',
'compound_statement',
'expression_statement',
'selection_statement',
'iteration_statement',
'jump_statement',
'statement_list',
'declaration_list',
'external_declaration',
'function_definition',
'@2',
'@3',
'@4',
'@5']

Racc_debug_parser = false

##### racc system variables end #####

 # reduce 0 omitted

 # reduce 1 omitted

module_eval <<'.,.,', 'Crubyparse.y', 24
  def _reduce_2( val, _values, result )
 return((val[0] =~ /^0[^\.]/) ? val[0].oct : val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 25
  def _reduce_3( val, _values, result )
 return(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 26
  def _reduce_4( val, _values, result )
 return(val[1])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 29
  def _reduce_5( val, _values, result )
 return(val[0])
   result
  end
.,.,

 # reduce 6 omitted

 # reduce 7 omitted

 # reduce 8 omitted

 # reduce 9 omitted

 # reduce 10 omitted

 # reduce 11 omitted

 # reduce 12 omitted

module_eval <<'.,.,', 'Crubyparse.y', 39
  def _reduce_13( val, _values, result )
 return(val[0])
   result
  end
.,.,

 # reduce 14 omitted

module_eval <<'.,.,', 'Crubyparse.y', 43
  def _reduce_15( val, _values, result )
 return(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 44
  def _reduce_16( val, _values, result )
 return(val[1].to_i + 1)
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 45
  def _reduce_17( val, _values, result )
 return(val[1].to_i - 1)
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 56
  def _reduce_18( val, _values, result )
 if val[0].eql?'-'
                                                    return(-val[1].to_i)
                                                  elsif val[0].eql?'+'
                                                    return( val[1].to_i) 
                                                  elsif val[0].eql?'~'
                                                    return(~(val[1].to_i)) 
                                                  elsif val[0].eql?'!'
                                                    return(val[1].to_i > 0 ? 0 : 1)
                                                  else
                                                    return(val[1].to_i) 
                                                  end
   result
  end
.,.,

 # reduce 19 omitted

 # reduce 20 omitted

 # reduce 21 omitted

 # reduce 22 omitted

 # reduce 23 omitted

 # reduce 24 omitted

 # reduce 25 omitted

 # reduce 26 omitted

module_eval <<'.,.,', 'Crubyparse.y', 69
  def _reduce_27( val, _values, result )
 return(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 70
  def _reduce_28( val, _values, result )
 return(val[1])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 73
  def _reduce_29( val, _values, result )
 return(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 74
  def _reduce_30( val, _values, result )
 return(val[0].to_i * val[2].to_i)
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 75
  def _reduce_31( val, _values, result )
 return(val[0].to_i / val[2].to_i)
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 76
  def _reduce_32( val, _values, result )
 return(val[0].to_i % val[2].to_i)
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 79
  def _reduce_33( val, _values, result )
 return(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 80
  def _reduce_34( val, _values, result )
 return(val[0].to_i + val[2].to_i)
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 81
  def _reduce_35( val, _values, result )
 return(val[0].to_i - val[2].to_i)
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 84
  def _reduce_36( val, _values, result )
 return(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 85
  def _reduce_37( val, _values, result )
 return(val[0].to_i << val[2].to_i)
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 86
  def _reduce_38( val, _values, result )
 return(val[0].to_i >> val[2].to_i)
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 89
  def _reduce_39( val, _values, result )
 return(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 90
  def _reduce_40( val, _values, result )
 return((val[0].to_i <  val[2].to_i) ? 1 : 0)
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 91
  def _reduce_41( val, _values, result )
 return((val[0].to_i >  val[2].to_i) ? 1 : 0)
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 92
  def _reduce_42( val, _values, result )
 return((val[0].to_i <= val[2].to_i) ? 1 : 0)
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 93
  def _reduce_43( val, _values, result )
 return((val[0].to_i >= val[2].to_i) ? 1 : 0)
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 96
  def _reduce_44( val, _values, result )
 return(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 97
  def _reduce_45( val, _values, result )
 return((val[0].to_i == val[2].to_i) ? 1 : 0)
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 98
  def _reduce_46( val, _values, result )
 return((val[0].to_i != val[2].to_i) ? 1 : 0)
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 101
  def _reduce_47( val, _values, result )
 return(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 102
  def _reduce_48( val, _values, result )
 return(val[0].to_i & val[2].to_i)
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 105
  def _reduce_49( val, _values, result )
 return(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 106
  def _reduce_50( val, _values, result )
 return(val[0].to_i ^ val[2].to_i)
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 109
  def _reduce_51( val, _values, result )
 return(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 110
  def _reduce_52( val, _values, result )
 return(val[0].to_i | val[2].to_i)
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 113
  def _reduce_53( val, _values, result )
 return(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 114
  def _reduce_54( val, _values, result )
 return(((val[0].to_i > 0) && (val[2].to_i > 0)) ? 1 : 0)
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 117
  def _reduce_55( val, _values, result )
 return(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 118
  def _reduce_56( val, _values, result )
 return(((val[0].to_i > 0) || (val[2].to_i > 0)) ? 1 : 0)
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 121
  def _reduce_57( val, _values, result )
 return(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 122
  def _reduce_58( val, _values, result )
 return((val[0].to_i > 0) ? val[2] : val[4])
   result
  end
.,.,

 # reduce 59 omitted

 # reduce 60 omitted

 # reduce 61 omitted

 # reduce 62 omitted

 # reduce 63 omitted

 # reduce 64 omitted

 # reduce 65 omitted

 # reduce 66 omitted

 # reduce 67 omitted

 # reduce 68 omitted

 # reduce 69 omitted

 # reduce 70 omitted

 # reduce 71 omitted

 # reduce 72 omitted

 # reduce 73 omitted

module_eval <<'.,.,', 'Crubyparse.y', 146
  def _reduce_74( val, _values, result )
 return(val[0])
   result
  end
.,.,

 # reduce 75 omitted

module_eval <<'.,.,', 'Crubyparse.y', 150
  def _reduce_76( val, _values, result )
 declare(val[0], val[1])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 154
  def _reduce_77( val, _values, result )
 return ((val[0] == nil) || val[0].has_key?('.type') ? val[0] : 
                                          merge_hashes(val[0], {'.type' => 'int'}))
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 157
  def _reduce_78( val, _values, result )
 return(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 158
  def _reduce_79( val, _values, result )
 return(merge_hashes(val[0], val[1]))
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 159
  def _reduce_80( val, _values, result )
 return(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 160
  def _reduce_81( val, _values, result )
 return(merge_hashes(val[0], val[1]))
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 161
  def _reduce_82( val, _values, result )
 return(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 162
  def _reduce_83( val, _values, result )
 return(merge_hashes(val[0], val[1]))
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 165
  def _reduce_84( val, _values, result )
 return ([val[0]])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 166
  def _reduce_85( val, _values, result )
 return (val[0].push(val[2]))
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 169
  def _reduce_86( val, _values, result )
 return(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 170
  def _reduce_87( val, _values, result )
 return(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 173
  def _reduce_88( val, _values, result )
 return({'.storage' => val[0]})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 174
  def _reduce_89( val, _values, result )
 return({'.storage' => val[0]})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 175
  def _reduce_90( val, _values, result )
 return({'.storage' => val[0]})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 176
  def _reduce_91( val, _values, result )
 return({'.storage' => val[0]})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 177
  def _reduce_92( val, _values, result )
 return({'.storage' => val[0]})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 180
  def _reduce_93( val, _values, result )
 return({'.type' => val[0]})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 181
  def _reduce_94( val, _values, result )
 return({'.type' => val[0]})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 182
  def _reduce_95( val, _values, result )
 return({'.type' => val[0]})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 183
  def _reduce_96( val, _values, result )
 return({'.type' => val[0]})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 184
  def _reduce_97( val, _values, result )
 return({'.type' => val[0]})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 185
  def _reduce_98( val, _values, result )
 return({'.type' => 'longlong'})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 186
  def _reduce_99( val, _values, result )
 return({'.type' => 'longlong'})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 187
  def _reduce_100( val, _values, result )
 return({'.type' => val[0]})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 188
  def _reduce_101( val, _values, result )
 return({'.type' => val[0]})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 189
  def _reduce_102( val, _values, result )
 return({'.type' => val[0]})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 190
  def _reduce_103( val, _values, result )
 return({'.type' => val[1]})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 191
  def _reduce_104( val, _values, result )
 return({'.type' => val[0]})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 192
  def _reduce_105( val, _values, result )
 return({'.signed' => 'signed'})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 193
  def _reduce_106( val, _values, result )
 return({'.signed' => 'unsigned'})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 194
  def _reduce_107( val, _values, result )
 return(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 195
  def _reduce_108( val, _values, result )
 return(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 196
  def _reduce_109( val, _values, result )
 return(get_table(@@typedef_table, val[0]))
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 204
  def _reduce_110( val, _values, result )
 typeval = _values[-3].clone
                nameval = _values[-2].clone
                @@name = nameval
                table = (typeval['.type'].eql?'union') ? @@uniontag_table : @@structtag_table
                insert_table(table, nameval, {})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 214
  def _reduce_111( val, _values, result )
 table = (val[0]['.type'].eql?'union') ? @@uniontag_table : @@structtag_table
                insert_table(table, val[1], struct_union_construct(val[0], \
                             val[4]).merge({'.type_or_id_name' => "(Struct/Union): #{val[1]}"}))
		c = get_table(table, val[1])
		if c.nil?
                  insert_table(table, val[1], {'.type' => val[0]['.type']}) 
                end
                fixup(@@name) # completes forward declared typedefs                
                return c
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 216
  def _reduce_112( val, _values, result )
 return struct_union_construct(val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 226
  def _reduce_113( val, _values, result )
 table = (val[0]['.type'].eql?'union') ? @@uniontag_table : @@structtag_table
                c = get_table(table, val[1])
                if c.nil?
                  insert_table(table, val[1], {'.type' => val[0]['.type']}) 
                end 
                if c.nil? # in case of forward declared in typedef
                  c = {'.forward_type' => val[0]['.type'], '.forward_base_name' => val[1]}
                end
                return c
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 229
  def _reduce_114( val, _values, result )
 return({'.type' => val[0]})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 230
  def _reduce_115( val, _values, result )
 return({'.type' => val[0]})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 233
  def _reduce_116( val, _values, result )
 return(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 234
  def _reduce_117( val, _values, result )
 val[1].each { |elem| val[0].push(elem) }; return val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 237
  def _reduce_118( val, _values, result )
 return(struct_union_declare(val[0], val[1]))
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 241
  def _reduce_119( val, _values, result )
 return ((val[0] == nil) || val[0].has_key?('.type') ? val[0] : 
                                             merge_hashes(val[0], {'.type' => 'int'}))
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 244
  def _reduce_120( val, _values, result )
 return(merge_hashes(val[0], val[1]))
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 245
  def _reduce_121( val, _values, result )
 return(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 246
  def _reduce_122( val, _values, result )
 return(merge_hashes(val[0], val[1]))
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 247
  def _reduce_123( val, _values, result )
 return(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 250
  def _reduce_124( val, _values, result )
 return([val[0]])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 251
  def _reduce_125( val, _values, result )
 return(val[0].push(val[2]))
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 254
  def _reduce_126( val, _values, result )
 return(val[0])
   result
  end
.,.,

 # reduce 127 omitted

 # reduce 128 omitted

module_eval <<'.,.,', 'Crubyparse.y', 260
  def _reduce_129( val, _values, result )
 return({'.type' =>'enum', '.values'=> create_enum_hash(val[2])})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 270
  def _reduce_130( val, _values, result )
 c = get_table(@@enumtag_table, val[1])
          if c.nil?
            c = insert_table(@@enumtag_table, val[1], {'.type'=>'enum', '.values' => create_enum_hash(val[3]),
                                                       '.type_or_id_name'=>"(enum): #{val[1]}"}) 
          end
          return c
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 276
  def _reduce_131( val, _values, result )
 c = get_table(@@enumtag_table, val[1])
                                   if c.nil?
                                     insert_table(@@enumtag_table, val[1], {})
                                   end
                                   return c
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 279
  def _reduce_132( val, _values, result )
 return([val[0]])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 280
  def _reduce_133( val, _values, result )
 return(val[0].push(val[2]))
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 283
  def _reduce_134( val, _values, result )
 return([val[0], nil])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 284
  def _reduce_135( val, _values, result )
 return([val[0], val[2]])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 287
  def _reduce_136( val, _values, result )
 return({'.type_qualifier' => val[0]})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 288
  def _reduce_137( val, _values, result )
 return({'.type_qualifier' => val[0]})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 291
  def _reduce_138( val, _values, result )
 return([val[1][0], link_type(val[1][1], val[0])])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 292
  def _reduce_139( val, _values, result )
 return(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 295
  def _reduce_140( val, _values, result )
 return([val[0], nil])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 296
  def _reduce_141( val, _values, result )
 return(val[1])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 298
  def _reduce_142( val, _values, result )
 return [val[0][0], link_type(val[0][1], {'.type' =>'array', '.array_size' => val[2]})]
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 300
  def _reduce_143( val, _values, result )
 return [val[0][0], link_type(val[0][1], {'.type' =>'array', '.array_size' => 1})]
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 302
  def _reduce_144( val, _values, result )
 return [val[0][0], link_type(val[0][1], {'.type' => 'function'})]
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 304
  def _reduce_145( val, _values, result )
 return [val[0][0], link_type(val[0][1], {'.type' => 'function'})]
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 305
  def _reduce_146( val, _values, result )
 return [val[0][0], link_type(val[0][1], {'.type' => 'function'})]
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 308
  def _reduce_147( val, _values, result )
 return({'.type' =>'pointer'})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 309
  def _reduce_148( val, _values, result )
 return(merge_hashes(val[1], {'.type' =>'pointer'}))
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 310
  def _reduce_149( val, _values, result )
 return({'.type' =>'pointer', '.subtype'  => val[1]})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 312
  def _reduce_150( val, _values, result )
 return(merge_hashes(val[1], {'.type' =>'pointer', '.subtype'  => val[2]}))
   result
  end
.,.,

 # reduce 151 omitted

 # reduce 152 omitted

 # reduce 153 omitted

 # reduce 154 omitted

 # reduce 155 omitted

 # reduce 156 omitted

 # reduce 157 omitted

 # reduce 158 omitted

 # reduce 159 omitted

 # reduce 160 omitted

 # reduce 161 omitted

 # reduce 162 omitted

 # reduce 163 omitted

 # reduce 164 omitted

 # reduce 165 omitted

 # reduce 166 omitted

 # reduce 167 omitted

 # reduce 168 omitted

 # reduce 169 omitted

 # reduce 170 omitted

 # reduce 171 omitted

 # reduce 172 omitted

 # reduce 173 omitted

 # reduce 174 omitted

 # reduce 175 omitted

 # reduce 176 omitted

 # reduce 177 omitted

 # reduce 178 omitted

 # reduce 179 omitted

 # reduce 180 omitted

 # reduce 181 omitted

 # reduce 182 omitted

 # reduce 183 omitted

 # reduce 184 omitted

 # reduce 185 omitted

 # reduce 186 omitted

 # reduce 187 omitted

 # reduce 188 omitted

 # reduce 189 omitted

 # reduce 190 omitted

 # reduce 191 omitted

 # reduce 192 omitted

 # reduce 193 omitted

 # reduce 194 omitted

 # reduce 195 omitted

 # reduce 196 omitted

 # reduce 197 omitted

 # reduce 198 omitted

 # reduce 199 omitted

 # reduce 200 omitted

 # reduce 201 omitted

 # reduce 202 omitted

 # reduce 203 omitted

 # reduce 204 omitted

 # reduce 205 omitted

 # reduce 206 omitted

 # reduce 207 omitted

 # reduce 208 omitted

 # reduce 209 omitted

 # reduce 210 omitted

 # reduce 211 omitted

module_eval <<'.,.,', 'Crubyparse.y', 414
  def _reduce_212( val, _values, result )
 [@@symbol_table, @@structtag_table, @@typedef_table, @@uniontag_table, @@enumtag_table]
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 415
  def _reduce_213( val, _values, result )
 [@@symbol_table, @@structtag_table, @@typedef_table, @@uniontag_table, @@enumtag_table]
   result
  end
.,.,

 # reduce 214 omitted

 # reduce 215 omitted

module_eval <<'.,.,', 'Crubyparse.y', 422
  def _reduce_216( val, _values, result )
 push_all_table_contexts()
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 422
  def _reduce_217( val, _values, result )
 pop_all_table_contexts()
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 423
  def _reduce_218( val, _values, result )
 push_all_table_contexts()
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 423
  def _reduce_219( val, _values, result )
 pop_all_table_contexts()
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 424
  def _reduce_220( val, _values, result )
 push_all_table_contexts()
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 424
  def _reduce_221( val, _values, result )
 pop_all_table_contexts()
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 425
  def _reduce_222( val, _values, result )
 push_all_table_contexts()
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 425
  def _reduce_223( val, _values, result )
 pop_all_table_contexts()
   result
  end
.,.,

 def _reduce_none( val, _values, result )
  result
 end

end   # class Crubyparse


#
# Error report gets displayed on screen. If the parameter is omitted, will report
# a Syntax Error and cite the offending line. Otherwise, the text given in the
# parameter will be cited verbatim.
#
def error_report(text="")
  if text.eql?""
    puts "Syntax Error: \"#{@@inputarr[@@line_number-1]}\""
  else
    puts "#{text}"
  end
end

#
# Checks if an identifier is found in a table. Returns the value of the 
# identifier if found, else nil. The table is searched in reverse order
# to allow later entries to override previous entries.
#
def get_table(table, identifier)
  if table['quick_look'].has_key?(identifier)
    table['table_data'].reverse_each do |elem|
      return elem[1] if elem[0].eql?identifier
    end
  end
  return nil
end

#
# Inserts a new entry in the given table. 
# If the identifier already exists in the table, but its data is empty, 
# assigns the new data to it. If it already has data, this is seen
# as a redefinition and an error report is written, unless the previous
# definition was a forward declaration.
#
def insert_table(table, identifier, data)
  if existing_data = get_table(table, identifier)
     if existing_data.empty? || !existing_data.has_key?('.members')
      data.each { |key, value| existing_data[key] = value }
      return data
    else
      error_report "Error in insert_table: Redefinition of #{identifier}"
      raise ParseError
    end
  end

  table['table_data'].push([identifier, data])
  table['quick_look'][identifier] = 1
  return data
end

#
# Follows the nested chain of hashes given in hash1 until it finds the last 
# (innermost) entry (which will not have a '.subtype' key). It creates such
# a key for this entry, and inserts the contents of hash2 as its value, thereby
# creating a new link in the chain, nested one level deeper.
# Returns the modified hash1.
#
def link_type(hash1, hash2)
  return hash1 if hash2.nil?
  return hash2 if hash1.nil?

  current = hash1

  while current.has_key?('.subtype')
    current = current['.subtype']
  end
  current['.subtype'] = hash2
  return hash1
end

#
# Returns a hash of enum constants, where the key is the identifier and its value
# is the computed value, allowing for user defined enum assignments.
# A new entry is also inserted into the symbol table for each enum constant.
#
def create_enum_hash(enumarray)
  enum_value = -1
  enumhash = {}

  enumarray.each do |elem|
    if enumhash.has_key?(elem[0])
      error_report "Error in create_enum_list: Element redefinition: #{elem[0]}"
      raise ParseError
    end
    enum_value = (elem[1] == nil) ? enum_value + 1 : elem[1].to_i
    enumhash[elem[0]] = enum_value

    insert_table(@@symbol_table, elem[0], {'.type' =>'enum_const', '.value'=>enum_value, 
                 '.type_or_id_name' => "(Symbol): #{elem[0]}"})
  end

  return enumhash
end

#
# Returns a new hash consisting of hash2 merged to hash1. If key-value pairs with identical
# keys but different values exist in both hash1 and hash2, the former value will be
# overwritten by the latter. For type qualifiers this mechanism has been modified
# so the values are merged instead, allowing several type qualifiers to coexist.
#
def merge_hashes(hash1, hash2)
  merged_hash = hash1.clone
  return merged_hash if hash2.nil? || hash2.empty?

  if merged_hash.has_key?('.type_qualifier') && hash2.has_key?('.type_qualifier')
    hash2['.type_qualifier'] = "#{merged_hash['.type_qualifier']} #{hash2['.type_qualifier']}"
  end
  return merged_hash.merge!(hash2)
end

#
# Function called when either a variable or a type is declared.
# For each member in the declarator_list, containing [identifier, hash chain] 
# pairs, the following is done:
# The base type is inserted at the end of the declarator chain, and a new
# entry is inserted into the appropriate table, either the symbol_table
# or the typedef table.
#
def declare(base_type, declarator_list)
  basetype = base_type.clone

  if basetype.has_key?('.storage') and basetype['.storage'].eql?'typedef'
    target_table = @@typedef_table
    target_type = 'Type'
    if basetype.has_key?('.forward_type')
      basetype['.type'] = basetype['.forward_type']
      basetype.delete('.forward_type')
    end
  else
    target_table = @@symbol_table
    target_type = 'Symbol'
  end
  basetype.delete('.storage')

  declarator_list.each do |elem|
    current = elem[1]

    if !current.nil?
      while current.has_key?('.subtype') 
        current = current['.subtype']
      end
      current['.subtype'] = basetype
      data = elem[1].clone
    else
      data = basetype.clone
    end

    identifier = elem[0].clone
    if data.has_key?('.type_or_id_name')
      data['.base_ref_name'] = data['.type_or_id_name']
    end
    data['.type_or_id_name'] = "(#{target_type}): #{identifier}"
    insert_table(target_table, identifier, data)
  end
end

#
# Function called when a variable is declared inside a struct or union.
# For each member in the declarator_list, containing [identifier, hash chain] 
# pairs, the following is done:
# The base type is inserted at the end of the declarator chain, and a new
# entry is inserted into the array declare_array. This array is returned
# when the function finishes.
#
def struct_union_declare(base_type, declarator_list)
  basetype = base_type.clone
  declare_array = []

  declarator_list.each do |elem| 
    current = elem[1]

    if !current.nil?
      while current.has_key?('.subtype') 
        current = current['.subtype']
      end
      current['.subtype'] = basetype
      data = elem[1].clone
    else
      data = basetype
    end
    identifier = elem[0].clone
    declare_array.push([identifier, data])
  end

  return declare_array
end

#
# Returns a hash containing each member of a struct or union. Each
# member is represented as a name-type pair. The type is a chained
# hash describing a nested construct.
#
def struct_union_construct(base_type, member_list)
  con_hash = {'.type' => base_type['.type'].clone}  # struct or union 
  con_hash['.members'] = []

  member_list.each do |member|
    member_name = member[0]  # identifier
    member_type = member[1]  # chained hash

    con_hash['.members'].push([member_name, member_type])
  end

  return con_hash
end

#
# Pushes the context of a table onto the array "stack" when entering
# a function. What gets stored is not the actual contents of "table_data"
# but rather the number of elements currently present in "table_data".
# The contents of "table_data" is left unchanged.
#
def push_table_context(table)
  table['stack'].push(table['table_data'].length)
end

#
# Pushes the contexts of all tables onto their stacks
#
def push_all_table_contexts()
  [@@symbol_table, @@structtag_table, @@uniontag_table, @@enumtag_table, @@typedef_table].each do |table|
    push_table_context(table)
  end
end

#
# Pops the context back from "stack" when leaving a function. 
# The number of entries formerly present in "table_data" is popped
# off "stack", and this number of elements are then removed from
# the beginning of "table_data", leaving the rest unchanged.
# Since the removed elements are also present in the "quick_look"
# hash, these have to be removed also.
#
def pop_table_context(table)
  num_elem = table['stack'].pop
  removed = table['table_data'].slice!(0..num_elem-1)

  removed.each do |elem|
    table['quick_look'].delete(elem[0])
  end
end

#
# Pops the contexts of all tables from their stacks
#
def pop_all_table_contexts()
  [@@symbol_table, @@structtag_table, @@uniontag_table, @@enumtag_table, @@typedef_table].each do |table|
    pop_table_context(table)
  end
end

#
# If a forward declared struct/union in a typedef has been previously declared, 
# and the referenced struct/union is encountered, this routine will complete the 
# incomplete entry in the typedef table.
# 
#
def fixup(name)
  @@typedef_table['table_data'].each do |e|
    if e[1].has_key?('.forward_base_name') && e[1]['.forward_base_name'].eql?(name)
      table = (e[1]['.type'].eql?'union') ? @@uniontag_table : @@structtag_table
      table['table_data'].each do |g|
        if g[0].eql?(name)
          e[1]['.members'] = Marshal.load(Marshal.dump(g[1]['.members']))
          e[1].delete('.forward_base_name')
        end
      end
    end
  end
end

#
# Forward definitions in typedefs are allowed. Since we cannot distinguish between 
# structs or unions defined in typedefs or defined elsewhere, we have to perform a 
# final check that no incomplete definitions remain when parsing finishes. If this
# is the case it means the struct or union in question has not been defined. 
# We print an error message and terminate.
#
def check_undefined()
  errors = false
  @@typedef_table['table_data'].each do |e|
    if e[1].has_key?('.forward_base_name')
      etype = e[1].has_key?('.type') ? "#{e[1]['.type']} " : ""
      error_report("Error: #{etype}\'#{e[1]['.forward_base_name']}\' is undefined") 
      errors = true
    end
  end
  @@structtag_table['table_data'].each do |e|
    if e[1].has_key?('.members')
      e[1]['.members'].each do |g|
        if g[1].has_key?('.forward_base_name')
          error_report("Error: #{g[1]['.forward_type']} " +
            "\'#{g[1]['.forward_base_name']}\' is undefined")
          errors = true
        end
      end
    end
  end

  if errors
    puts "Terminating"
    exit
  end
end

#
# Prints the contents of the val array
#
def pv(val)
  puts "\n*** VAL: *********************************************************"
  val.each_index do |index|
    puts " val[#{index}]="
    pp val[index]
  end
  puts "******************************************************************"
  puts
end

#
# Prints the contents of the tables
#
def pt()
  puts "\n*** TABLES: ******************************************************"
  [@@symbol_table, @@structtag_table, @@uniontag_table, @@enumtag_table, @@typedef_table].each {|t| pp t; puts}
  puts "******************************************************************"
  puts
end

#
# Prints the contents of the _values stack
#
def ps(_values)
  puts "\n*** _VALUES: *****************************************************"
  _values.each_index do |index|
    puts " _values[#{index}]="
    pp _values[index]
  end
  puts "******************************************************************"
  puts
end
