# signals.py - Signal description
# ----------------------------------------------------------------
# WARNING: Do not modify this file. It is automatically generated
#          from signal files. Any modification will be lost the
#          next time the file is generated.

"""
Signal description file generated from:
    /home/cheuk/servern/farkle/signals.sig
Generated by:
    ./sigpa/python/sigpa.rb
"""

import ogre


# ----
class ABSFLInput(ogre.Struct):
    """Signal description for struct ABSFLInput"""

    ATTR_LIST = [
        'ABSFL_w',
        'ABSFL_v',
        'ABSFL_wheelABS',
        'ABSFL_R',
    ]
    
    def __init__(self):
        ogre.Struct.__init__(self)
        self.ABSFL_w = 0
        self.ABSFL_v = 0
        self.ABSFL_wheelABS = 0
        self.ABSFL_R = 0

    def serialize(self, writer, tag=None):
        writer.align(4)
        writer.writeU32(self.ABSFL_w)
        writer.writeU32(self.ABSFL_v)
        writer.writeU32(self.ABSFL_wheelABS)
        writer.writeU32(self.ABSFL_R)
        writer.align(4)

    def unserialize(self, reader, tag=None):
        reader.align(4)
        self.ABSFL_w = reader.readU32()
        self.ABSFL_v = reader.readU32()
        self.ABSFL_wheelABS = reader.readU32()
        self.ABSFL_R = reader.readU32()
        reader.align(4)

# ----
class ABSFL_INPUT_SIG(ogre.Signal):
    """Signal description for signal ABSFL_INPUT_SIG"""

    SIGNO = 13121

    ATTR_LIST = [
        'sig_no',
        'input',
    ]
    
    def __init__(self):
        ogre.Signal.__init__(self, self.SIGNO)
        self.input = ABSFLInput()

    def serialize(self, writer, tag=None):
        writer.align(4)
        self.input.serialize(writer)
        writer.align(4)

    def unserialize(self, reader, tag=None):
        reader.align(4)
        self.input.unserialize(reader)
        reader.align(4)

# ----
class ABSFLStateTrace(ogre.Struct):
    """Signal description for array ABSFLStateTrace"""

    ATTR_LIST = [
        'w',
        'wheelABS',
        'torqueABS',
        'v',
        'R',
        'state',
    ]
    
    def __init__(self):
        ogre.Struct.__init__(self)
        self.w = 0
        self.wheelABS = 0
        self.torqueABS = 0
        self.v = 0
        self.R = 0
        self.state = 0

    def serialize(self, writer, tag=None):
        writer.align(4)
        writer.writeU32(self.w)
        writer.writeU32(self.wheelABS)
        writer.writeU32(self.torqueABS)
        writer.writeU32(self.v)
        writer.writeU32(self.R)
        writer.writeU32(self.state)
        writer.align(4)

    def unserialize(self, reader, tag=None):
        reader.align(4)
        self.w = reader.readU32()
        self.wheelABS = reader.readU32()
        self.torqueABS = reader.readU32()
        self.v = reader.readU32()
        self.R = reader.readU32()
        self.state = reader.readU32()
        reader.align(4)

# ----
class ABSFL_OUTPUT_SIG(ogre.Signal):
    """Signal description for signal ABSFL_OUTPUT_SIG"""

    SIGNO = 13122

    ATTR_LIST = [
        'sig_no',
        'num_states',
        'states',
    ]
    
    def __init__(self):
        ogre.Signal.__init__(self, self.SIGNO)
        self.num_states = 0
        self.states = ogre.Array([ ABSFLStateTrace() for i in range(10) ])

    def serialize(self, writer, tag=None):
        writer.align(4)
        writer.writeU32(self.num_states)
        writer.composite_array(ABSFLStateTrace, self.states, 10, writer.struct)
        writer.align(4)

    def unserialize(self, reader, tag=None):
        reader.align(4)
        self.num_states = reader.readU32()
        self.states = reader.composite_array(ABSFLStateTrace, 10, 10, reader.struct)
        reader.align(4)

# ----
ogre.Signal.register(ABSFL_INPUT_SIG.SIGNO, ABSFL_INPUT_SIG)
ogre.Signal.register(ABSFL_OUTPUT_SIG.SIGNO, ABSFL_OUTPUT_SIG)

# End of file
