#
# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.5
# from racc grammer file "Crubyparse.y".
#

require 'racc/parser'



@@symbol_table    = { 'table_data' => [], 'quick_look' => {}, 'stack' => [], 'name' =>"SYMBOL table" }
@@structtag_table = { 'table_data' => [], 'quick_look' => {}, 'stack' => [], 'name' =>"STRUCT TAG table" }
@@uniontag_table  = { 'table_data' => [], 'quick_look' => {}, 'stack' => [], 'name' =>"UNION TAG table" }
@@enumtag_table   = { 'table_data' => [], 'quick_look' => {}, 'stack' => [], 'name' =>"ENUM TAG table" }
@@typedef_table   = { 'table_data' => [], 'quick_look' => {}, 'stack' => [], 'name' =>"TYPEDEF table" }

@@latest_token = ''
@@line_number = 1
@@inputarr = []



class Crubyparse < Racc::Parser

module_eval <<'..end Crubyparse.y modeval..id889f55c89f', 'Crubyparse.y', 493

  #
  # Parser
  #
  def parse(input, options)

    @options = options
    @yydebug = true

    mode = "unreal"

    if mode == "unreal"
      @@inputarr = input.split(/\n/)
      @input = input
      do_parse
    else
      File.open("inputfile", "r") do |f|
        @input = f.readlines.join
        do_parse
      end
    end
    check_undefined
    return @@symbol_table, @@structtag_table, @@uniontag_table, @@enumtag_table, @@typedef_table

  end


  #
  # Lexer
  #
  def next_token
    a = []
  
    @lex_table = 
      [
       ['_*typedef_*\b',    :TYPEDEF],
       ['_*extern_*\b',     :EXTERN],
       ['_*static_*\b', 	:STATIC],
       ['_*auto_*\b', 	:AUTO],
       ['_*register_*\b', 	:REGISTER],
       ['_*char_*\b', 	:CHAR],
       ['_*short_*\b', 	:SHORT],
       ['_*int_*\b', 	:INT],
       #['uint32\_t\b', 	:UINT32_t], # 2013-07-20
       ['_*long_*\b', 	:LONG],
       ['_*signed_*\b', 	:SIGNED],
       ['_*unsigned_*\b', 	:UNSIGNED],
       ['_*float_*\b', 	:FLOAT],
       ['_*double_*\b', 	:DOUBLE],
       ['_*const_*\b', 	:CONST],
       ['_*volatile_*\b', 	:VOLATILE],
       ['_*void_*\b', 	:VOID], 
       ['_*struct_*\b', 	:STRUCT],
       ['_*union_*\b', 	:UNION],
       ['_*enum_*\b', 	:ENUM],
       ['\.\.\.', 	:ELLIPSIS],
       ['_*case_*\b', 	:CASE],
       ['_*default_*\b', 	:DEFAULT],
       ['_*if_*\b', 	:IF],
       ['_*else_*\b', 	:ELSE],
       ['_*switch_*\b', 	:SWITCH],
       ['_*while_*\b', 	:WHILE],
       ['_*do_*\b', 	:DO],
       ['_*for_*\b', 	:FOR],
       ['_*goto_*\b', 	:GOTO],
       ['_*continue_*\b', 	:CONTINUE],
       ['_*break_*\b', 	:BREAK],
       ['_*return_*\b', 	:RETURN],
       ['_*sizeof_*\b', 	:SIZEOF],
       #['__extension__\b', :EXTENSION],
       ['0[xX][a-fA-F0-9]+',			   :CONSTANT], #hex constant
       ['0[0-9]+',				   :CONSTANT], #octal constant 
       ['(?=\d|\.\d)\d*(\.\d*)?([Ee]([+-]?\d+))?', :CONSTANT], #integer or floating point...
       ['"[^"]*"', 	:STRING_LITERAL], 
       ['->', 		:PTR_OP],
       #['\*', 		:P_OP],
       ['\+\+', 	:INC_OP],
       ['--', 		:DEC_OP],
       ['<<', 		:LEFT_OP],
       ['>>', 		:RIGHT_OP],
       ['<=', 		:LE_OP],
       ['>=', 		:GE_OP],
       ['==', 		:EQ_OP],
       ['!=', 		:NE_OP],
       ['&&', 		:AND_OP],
       ['\|\|', 	:OR_OP],
       ['\*=', 		:MUL_ASSIGN],
       ['/=', 		:DIV_ASSIGN],
       ['%=', 		:MOD_ASSIGN],
       ['\+=', 		:ADD_ASSIGN],
       ['-=', 		:SUB_ASSIGN],
       ['<<=', 		:LEFT_ASSIGN],
       ['>>=', 		:RIGHT_ASSIGN],
       ['&=', 		:AND_ASSIGN],
       ['\^=', 		:XOR_ASSIGN],
       ['\|=', 		:OR_ASSIGN],
       #['__builtin_va_list__\b', :EXTENSION],
       #['__loff_t\b', :LOFF],
       ['[_a-zA-Z]\w*', :IDENTIFIER],
      ]

    # Advance line number if a newline is seen
    if @input.match(/\A\s*(\n)\s*/)
      @@line_number += 1
    end

    # Discard white space and newlines
    @input.sub!(/\A[\s\n]+/, '')

    # Check for empty input and end of input
    if @input.empty?
      if @@latest_token == ''
        raise ParseError, "ParseError: Empty input file, terminating"
      else
        puts "End of input" if @options.debug
        return [false, false]
      end
    end
    
    @found = false
    
    # Scan lex table for match
    @lex_table.each do |elem|
      if @input.sub!(/\A(#{elem[0]})/, '')
        a = [elem[1], $1]
        @found = true
        break
      end
    end
      
    # Assume token is first single char in input
    if !@found 
      if @input.sub!(/(\A.)/, '')
        a = [$1, $1]
      end
    end

    # If an identifier was found, but it is a typename defined in the 
    # typedef_table, change the symbol from :IDENTIFIER to :TYPE_NAME.
    # (STRUCT, UNION and ENUM can never be followed by a typename)

    unless @@latest_token.eql?'STRUCT' or @@latest_token.eql?'UNION' or @@latest_token.eql?'ENUM' 
      if a[0].is_a?(Symbol) and a[0].id2name.eql?'IDENTIFIER' and 
         get_table(@@typedef_table, $1) and @@latest_token != 'TYPE_NAME'
        a[0] = :TYPE_NAME
      end
    end

    if a[0].is_a?(Symbol)
      @@latest_token = a[0].id2name
    else
      @@latest_token = a[0]
    end

    return a

  end

  def on_error(t, val, vstack)
    args = "parse error on value " +
                            val.inspect + ' ' + token_to_str(t) + "\n"
    error_report "Error near line #{@@line_number} in \'trimmedcppfile\': #{args}"
    #puts "Error near line #{@@line_number} in \'trimmedcppfile\':"
    #raise ParseError, sprintf("parse error on value %s (%s)",
    #                           val.inspect, token_to_str(t) || '?')
    #@vstack = vstack
  end

..end Crubyparse.y modeval..id889f55c89f

##### racc 1.4.5 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 1, 86, :_reduce_none,
 1, 86, :_reduce_2,
 1, 86, :_reduce_3,
 3, 86, :_reduce_4,
 1, 88, :_reduce_5,
 4, 88, :_reduce_none,
 3, 88, :_reduce_none,
 4, 88, :_reduce_none,
 3, 88, :_reduce_none,
 3, 88, :_reduce_none,
 2, 88, :_reduce_none,
 2, 88, :_reduce_none,
 1, 89, :_reduce_13,
 3, 89, :_reduce_none,
 1, 91, :_reduce_15,
 2, 91, :_reduce_16,
 2, 91, :_reduce_17,
 2, 91, :_reduce_18,
 2, 91, :_reduce_none,
 4, 91, :_reduce_20,
 1, 92, :_reduce_none,
 1, 92, :_reduce_none,
 1, 92, :_reduce_none,
 1, 92, :_reduce_none,
 1, 92, :_reduce_none,
 1, 92, :_reduce_none,
 1, 93, :_reduce_27,
 4, 93, :_reduce_28,
 1, 95, :_reduce_29,
 3, 95, :_reduce_30,
 3, 95, :_reduce_31,
 3, 95, :_reduce_32,
 1, 96, :_reduce_33,
 3, 96, :_reduce_34,
 3, 96, :_reduce_35,
 1, 97, :_reduce_36,
 3, 97, :_reduce_37,
 3, 97, :_reduce_38,
 1, 98, :_reduce_39,
 3, 98, :_reduce_40,
 3, 98, :_reduce_41,
 3, 98, :_reduce_42,
 3, 98, :_reduce_43,
 1, 99, :_reduce_44,
 3, 99, :_reduce_45,
 3, 99, :_reduce_46,
 1, 100, :_reduce_47,
 3, 100, :_reduce_48,
 1, 101, :_reduce_49,
 3, 101, :_reduce_50,
 1, 102, :_reduce_51,
 3, 102, :_reduce_52,
 1, 103, :_reduce_53,
 3, 103, :_reduce_54,
 1, 104, :_reduce_55,
 3, 104, :_reduce_56,
 1, 105, :_reduce_57,
 5, 105, :_reduce_58,
 1, 90, :_reduce_none,
 3, 90, :_reduce_none,
 1, 106, :_reduce_none,
 1, 106, :_reduce_none,
 1, 106, :_reduce_none,
 1, 106, :_reduce_none,
 1, 106, :_reduce_none,
 1, 106, :_reduce_none,
 1, 106, :_reduce_none,
 1, 106, :_reduce_none,
 1, 106, :_reduce_none,
 1, 106, :_reduce_none,
 1, 106, :_reduce_none,
 1, 87, :_reduce_none,
 3, 87, :_reduce_none,
 1, 107, :_reduce_74,
 2, 108, :_reduce_none,
 3, 108, :_reduce_76,
 2, 108, :_reduce_77,
 1, 109, :_reduce_78,
 1, 111, :_reduce_79,
 2, 111, :_reduce_80,
 1, 111, :_reduce_81,
 2, 111, :_reduce_82,
 1, 111, :_reduce_83,
 2, 111, :_reduce_84,
 1, 110, :_reduce_85,
 3, 110, :_reduce_86,
 1, 115, :_reduce_87,
 3, 115, :_reduce_88,
 1, 112, :_reduce_89,
 1, 112, :_reduce_90,
 1, 112, :_reduce_91,
 1, 112, :_reduce_92,
 1, 112, :_reduce_93,
 1, 113, :_reduce_94,
 1, 113, :_reduce_95,
 2, 113, :_reduce_96,
 1, 113, :_reduce_97,
 1, 113, :_reduce_98,
 3, 113, :_reduce_99,
 2, 113, :_reduce_100,
 2, 113, :_reduce_101,
 1, 113, :_reduce_102,
 1, 113, :_reduce_103,
 2, 113, :_reduce_104,
 1, 113, :_reduce_105,
 1, 113, :_reduce_106,
 1, 113, :_reduce_107,
 1, 113, :_reduce_108,
 1, 113, :_reduce_109,
 1, 113, :_reduce_110,
 0, 122, :_reduce_111,
 6, 118, :_reduce_112,
 4, 118, :_reduce_113,
 2, 118, :_reduce_114,
 1, 120, :_reduce_115,
 1, 120, :_reduce_116,
 1, 121, :_reduce_117,
 2, 121, :_reduce_118,
 2, 123, :_reduce_119,
 3, 123, :_reduce_120,
 2, 123, :_reduce_121,
 1, 124, :_reduce_122,
 2, 126, :_reduce_123,
 1, 126, :_reduce_124,
 2, 126, :_reduce_125,
 1, 126, :_reduce_126,
 1, 125, :_reduce_127,
 3, 125, :_reduce_128,
 1, 127, :_reduce_129,
 2, 127, :_reduce_none,
 3, 127, :_reduce_none,
 4, 119, :_reduce_132,
 5, 119, :_reduce_133,
 2, 119, :_reduce_134,
 1, 128, :_reduce_135,
 3, 128, :_reduce_136,
 1, 129, :_reduce_137,
 3, 129, :_reduce_138,
 1, 114, :_reduce_139,
 1, 114, :_reduce_140,
 2, 116, :_reduce_141,
 1, 116, :_reduce_142,
 1, 131, :_reduce_143,
 3, 131, :_reduce_144,
 4, 131, :_reduce_145,
 3, 131, :_reduce_146,
 4, 131, :_reduce_147,
 4, 131, :_reduce_148,
 3, 131, :_reduce_149,
 1, 130, :_reduce_150,
 2, 130, :_reduce_151,
 2, 130, :_reduce_152,
 3, 130, :_reduce_153,
 1, 134, :_reduce_none,
 2, 134, :_reduce_none,
 1, 132, :_reduce_none,
 3, 132, :_reduce_none,
 1, 135, :_reduce_none,
 3, 135, :_reduce_none,
 2, 136, :_reduce_none,
 2, 136, :_reduce_none,
 1, 136, :_reduce_none,
 1, 133, :_reduce_none,
 3, 133, :_reduce_none,
 1, 94, :_reduce_none,
 2, 94, :_reduce_none,
 1, 137, :_reduce_none,
 1, 137, :_reduce_none,
 2, 137, :_reduce_none,
 3, 138, :_reduce_none,
 2, 138, :_reduce_none,
 3, 138, :_reduce_none,
 3, 138, :_reduce_none,
 4, 138, :_reduce_none,
 2, 138, :_reduce_none,
 3, 138, :_reduce_none,
 3, 138, :_reduce_none,
 4, 138, :_reduce_none,
 1, 117, :_reduce_none,
 3, 117, :_reduce_none,
 4, 117, :_reduce_none,
 1, 139, :_reduce_none,
 3, 139, :_reduce_none,
 1, 140, :_reduce_none,
 1, 140, :_reduce_none,
 1, 140, :_reduce_none,
 1, 140, :_reduce_none,
 1, 140, :_reduce_none,
 1, 140, :_reduce_none,
 3, 141, :_reduce_none,
 4, 141, :_reduce_none,
 3, 141, :_reduce_none,
 2, 142, :_reduce_none,
 3, 142, :_reduce_none,
 3, 142, :_reduce_none,
 4, 142, :_reduce_none,
 1, 148, :_reduce_none,
 2, 148, :_reduce_198,
 1, 147, :_reduce_none,
 2, 147, :_reduce_none,
 1, 143, :_reduce_none,
 2, 143, :_reduce_none,
 5, 144, :_reduce_none,
 7, 144, :_reduce_none,
 5, 144, :_reduce_none,
 5, 145, :_reduce_none,
 7, 145, :_reduce_none,
 6, 145, :_reduce_none,
 7, 145, :_reduce_none,
 3, 146, :_reduce_none,
 2, 146, :_reduce_none,
 2, 146, :_reduce_none,
 2, 146, :_reduce_none,
 3, 146, :_reduce_none,
 1, 85, :_reduce_215,
 2, 85, :_reduce_216,
 1, 149, :_reduce_none,
 1, 149, :_reduce_none,
 0, 151, :_reduce_219,
 5, 150, :_reduce_220,
 0, 152, :_reduce_221,
 4, 150, :_reduce_222,
 0, 153, :_reduce_223,
 4, 150, :_reduce_224,
 0, 154, :_reduce_225,
 3, 150, :_reduce_226 ]

racc_reduce_n = 227

racc_shift_n = 368

clist = [
'123,137,130,239,350,63,45,342,8,8,8,8,8,288,61,174,62,335,129,228,123',
'26,32,26,32,341,17,207,208,207,208,8,2,5,10,12,14,18,21,24,26,32,37',
'1,4,9,17,3,268,3,269,308,2,5,10,12,14,18,21,24,26,32,37,1,4,9,16,16',
'16,171,171,174,174,3,3,3,3,7,141,101,105,109,213,113,117,64,46,66,66',
'16,209,210,209,210,190,8,3,292,207,208,76,239,338,17,22,25,28,34,38',
'2,5,10,12,14,18,21,24,26,32,37,1,4,9,137,147,150,153,331,156,159,162',
'163,164,138,139,140,110,334,77,239,8,136,91,94,96,100,103,108,7,141',
'101,105,109,16,113,117,189,142,77,245,3,209,210,288,131,174,48,49,8',
'167,3,50,216,168,17,22,25,28,34,38,2,5,10,12,14,18,21,24,26,32,37,1',
'4,9,239,147,150,153,16,156,159,162,163,164,138,139,140,110,362,166,238',
'239,239,91,94,96,100,103,108,141,101,105,109,169,113,117,16,312,142',
'77,144,314,307,3,253,254,256,257,258,247,248,249,250,252,196,216,196',
'218,306,197,198,197,198,176,177,141,101,105,109,345,113,117,325,239',
'344,147,150,153,239,156,159,162,163,164,138,139,140,110,332,268,184',
'269,333,91,94,96,100,103,108,196,185,61,346,62,197,198,239,251,142,77',
'242,147,150,153,186,156,159,162,163,164,138,139,140,110,7,179,180,182',
'184,91,94,96,100,103,108,364,205,206,187,239,202,203,205,206,142,77',
'320,205,206,336,17,22,25,28,34,38,2,5,10,12,14,18,21,24,26,32,37,1,4',
'9,97,101,105,109,185,113,117,186,17,178,75,181,187,183,2,5,10,12,14',
'18,21,24,26,32,37,1,4,9,205,206,205,206,291,131,324,-221,141,101,105',
'109,77,113,117,202,203,202,203,176,177,322,135,82,77,72,71,201,72,121',
'110,214,280,278,347,77,91,94,96,100,103,108,349,141,101,105,109,326',
'113,117,262,261,224,353,147,150,153,260,156,159,162,163,164,138,139',
'140,110,72,244,231,241,44,91,94,96,100,103,108,97,101,105,109,361,113',
'117,240,43,142,77,147,150,153,237,156,159,162,163,164,138,139,140,110',
'232,366,235,,,91,94,96,100,103,108,141,101,105,109,,113,117,,,142,77',
',,,,,,,,,,,,110,,,,,,91,94,96,100,103,108,141,101,105,109,,113,117,',
',,224,147,150,153,,156,159,162,163,164,138,139,140,110,,,,,,91,94,96',
'100,103,108,141,101,105,109,,113,117,,,142,77,147,150,153,,156,159,162',
'163,164,138,139,140,110,,,,,,91,94,96,100,103,108,141,101,105,109,,113',
'117,,,142,77,147,150,153,,156,159,162,163,164,138,139,140,110,,,,,,91',
'94,96,100,103,108,141,101,105,109,,113,117,,,142,77,147,150,153,,156',
'159,162,163,164,138,139,140,110,,,,,,91,94,96,100,103,108,97,101,105',
'109,,113,117,,,142,77,147,150,153,,156,159,162,163,164,138,139,140,110',
',,,,,91,94,96,100,103,108,141,101,105,109,,113,117,,,142,77,,,,,,,,',
',,,,110,,,,,,91,94,96,100,103,108,141,101,105,109,,113,117,,,,224,147',
'150,153,,156,159,162,163,164,138,139,140,110,,,,,,91,94,96,100,103,108',
'141,101,105,109,,113,117,,,142,77,147,150,153,,156,159,162,163,164,138',
'139,140,110,,,,,,91,94,96,100,103,108,97,101,105,109,,113,117,,,142',
'77,147,150,153,,156,159,162,163,164,138,139,140,110,,,,,,91,94,96,100',
'103,108,97,101,105,109,,113,117,,,142,77,,,,,,97,101,105,109,,113,117',
'110,,,,,,91,94,96,100,103,108,97,101,105,109,,113,117,,,142,,,97,101',
'105,109,,113,117,,,,,110,,,,,,91,94,96,100,103,108,97,101,105,109,110',
'113,117,,,233,91,94,96,100,103,108,97,101,105,109,,113,117,110,,142',
',,,91,94,96,100,103,108,110,,,,,,91,94,96,100,103,108,97,101,105,109',
',113,117,,,,,110,,,114,,,91,94,96,100,103,108,97,101,105,109,110,113',
'117,,,,91,94,96,100,103,108,97,101,105,109,,113,117,,,,,,97,101,105',
'109,,113,117,110,,,,,,91,94,96,100,103,108,97,101,105,109,,113,117,',
',,,110,,,,,,91,94,96,100,103,108,97,101,105,109,110,113,117,,,,91,94',
'96,100,103,108,110,,,,,,91,94,96,100,103,108,97,101,105,109,,113,117',
'110,,,,,,91,94,96,100,103,108,97,101,105,109,,113,117,,,,,110,,,,,,91',
'94,96,100,103,108,97,101,105,109,,113,117,,,,,,97,101,105,109,110,113',
'117,,,,91,94,96,100,103,108,97,101,105,109,,113,117,110,,,,,,91,94,96',
'100,103,108,97,101,105,109,,113,117,,,,,110,,,,,,91,94,96,100,103,108',
'110,,,,,,91,94,96,100,103,108,97,101,105,109,110,113,117,,,,91,94,96',
'100,103,108,97,101,105,109,,113,117,110,,,,,,91,94,96,100,103,108,97',
'101,105,109,,113,117,,,,,,97,101,105,109,,113,117,,,,,110,,,,,,91,94',
'96,100,103,108,97,101,105,109,110,113,117,,,,91,94,96,100,103,108,,',
',,,,,110,,,,,,91,94,96,100,103,108,110,,,330,,,91,94,96,100,103,108',
'97,101,105,109,,113,117,,,,,192,,,,,,91,94,96,100,103,108,,,17,,,,,',
'2,5,10,12,14,18,21,24,26,32,37,1,4,9,97,101,105,109,,113,117,,,,,,,110',
',,,,,91,94,96,100,103,108,17,,,,,,2,5,10,12,14,18,21,24,26,32,37,1,4',
'9,97,101,105,109,,113,117,,,,,,,110,,,,,,91,94,96,100,103,108,97,101',
'105,109,,113,117,,,,,,97,101,105,109,,113,117,,,,,,97,101,105,109,,113',
'117,,,110,,,,,,91,94,96,100,103,108,97,101,105,109,,113,117,,,,,,,200',
',,,,,91,94,96,100,103,108,110,,,,,,91,94,96,100,103,108,110,,,,,,91',
'94,96,100,103,108,97,101,105,109,,113,117,,,200,,,,,,91,94,96,100,103',
'108,97,101,105,109,,113,117,,,,,,97,101,105,109,,113,117,,,,,,97,101',
'105,109,,113,117,,,,,,,110,,,,,,91,94,96,100,103,108,97,101,105,109',
',113,117,,,110,,,,,,91,94,96,100,103,108,110,,,,,,91,94,96,100,103,108',
'110,,,,,,91,94,96,100,103,108,97,101,105,109,,113,117,,,,,,,110,,,,',
',91,94,96,100,103,108,97,101,105,109,,113,117,,,,,,97,101,105,109,,113',
'117,,,,,,97,101,105,109,,113,117,,,110,,,,,,91,94,96,100,103,108,97',
'101,105,109,,113,117,,,,,,,110,277,,,,,91,94,96,100,103,108,110,,,,',
',91,94,96,100,103,108,110,,,,,,91,94,96,100,103,108,97,101,105,109,',
'113,117,,,110,,,,,,91,94,96,100,103,108,97,101,105,109,,113,117,,,,',
',97,101,105,109,,113,117,,,,,,97,101,105,109,,113,117,,,,,,,110,,,271',
',,91,94,96,100,103,108,97,101,105,109,,113,117,,,110,,,,,,91,94,96,100',
'103,108,110,,,,,,91,94,96,100,103,108,110,,,,,,91,94,96,100,103,108',
'97,101,105,109,,113,117,,,,58,7,8,110,359,,,,,91,94,96,100,103,108,97',
'101,105,109,,113,117,,,,,,17,22,25,28,34,38,2,5,10,12,14,18,21,24,26',
'32,37,1,4,9,,110,,,,,,91,94,96,100,103,108,16,7,8,,,,,3,,,,,,110,,,',
',,91,94,96,100,103,108,,,17,22,25,28,34,38,2,5,10,12,14,18,21,24,26',
'32,37,1,4,9,8,,,,,,,,,,,,,16,,,,,,,3,,,,,17,22,25,28,34,38,2,5,10,12',
'14,18,21,24,26,32,37,1,4,9,85,,,,,,,,,,,,,171,267,174,,,,,3,,,,,17,22',
'25,28,34,38,2,5,10,12,14,18,21,24,26,32,37,1,4,9,123,,,,,,,,,,,,,,88',
',,,,,7,,,,,,17,,,,,,2,5,10,12,14,18,21,24,26,32,37,1,4,9,17,22,25,28',
'34,38,2,5,10,12,14,18,21,24,26,32,37,1,4,9,7,,,,,,,,,,,,,,,,,,,,7,,',
',,,17,22,25,28,34,38,2,5,10,12,14,18,21,24,26,32,37,1,4,9,17,22,25,28',
'34,38,2,5,10,12,14,18,21,24,26,32,37,1,4,9,123,17,22,25,28,34,38,2,5',
'10,12,14,18,21,24,26,32,37,1,4,9,263,,,,,17,,,,,,2,5,10,12,14,18,21',
'24,26,32,37,1,4,9,17,22,25,28,34,38,2,5,10,12,14,18,21,24,26,32,37,1',
'4,9,,,,,,,,,,,,,,288,267,174,,,,,3,17,22,25,28,34,38,2,5,10,12,14,18',
'21,24,26,32,37,1,4,9,,,,,,,,,,,,,,,328,17,22,25,28,34,38,2,5,10,12,14',
'18,21,24,26,32,37,1,4,9,17,,,,,,2,5,10,12,14,18,21,24,26,32,37,1,4,9',
'17,22,25,28,34,38,2,5,10,12,14,18,21,24,26,32,37,1,4,9,17,22,25,28,34',
'38,2,5,10,12,14,18,21,24,26,32,37,1,4,9' ]
racc_action_table = arr = Array.new(2429, nil)
str = a = i = nil
idx = 0
clist.each do |str|
  str.split(',', -1).each do |i|
    arr[idx] = i.to_i unless i.empty?
    idx += 1
  end
end

clist = [
'122,134,65,285,329,36,9,310,57,39,130,89,175,290,35,290,35,285,65,134',
'304,3,3,40,40,310,122,274,274,120,120,16,122,122,122,122,122,122,122',
'122,122,122,122,122,122,122,304,3,272,40,272,219,304,304,304,304,304',
'304,304,304,304,304,304,304,304,304,57,39,130,89,175,89,175,57,39,130',
'89,160,160,160,160,160,122,160,160,36,9,57,39,16,274,274,120,120,106',
'307,16,195,273,273,53,195,304,160,160,160,160,160,160,160,160,160,160',
'160,160,160,160,160,160,160,160,160,160,73,160,160,160,270,160,160,160',
'160,160,160,160,160,160,279,80,279,31,73,160,160,160,160,160,160,77',
'77,77,77,77,307,77,77,106,160,160,160,307,273,273,193,81,193,12,12,126',
'84,193,12,307,84,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77',
'77,77,77,151,77,77,77,31,77,77,77,77,77,77,77,77,77,358,83,151,234,358',
'77,77,77,77,77,77,157,157,157,157,86,157,157,126,234,77,77,77,236,217',
'126,161,161,161,161,161,161,161,161,161,161,112,126,296,126,217,112',
'112,296,296,90,90,246,246,246,246,318,246,246,265,318,317,157,157,157',
'317,157,157,157,157,157,157,157,157,157,275,172,282,172,275,157,157',
'157,157,157,157,297,283,60,319,60,297,297,319,161,157,157,157,246,246',
'246,284,246,246,246,246,246,246,246,246,246,68,92,92,92,93,246,246,246',
'246,246,246,360,118,118,286,360,116,116,303,303,246,246,246,302,302',
'287,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,342',
'342,342,342,95,342,342,98,127,92,49,92,102,92,127,127,127,127,127,127',
'127,127,127,127,127,127,127,127,301,301,300,300,194,68,261,68,345,345',
'345,345,54,345,345,299,299,298,298,281,281,259,72,58,226,46,45,115,71',
'63,342,123,183,179,322,133,342,342,342,342,342,342,327,162,162,162,162',
'266,162,162,168,164,342,342,345,345,345,163,345,345,345,345,345,345',
'345,345,345,137,159,138,156,7,345,345,345,345,345,345,131,131,131,131',
'355,131,131,153,5,345,345,162,162,162,150,162,162,162,162,162,162,162',
'162,162,139,362,141,,,162,162,162,162,162,162,237,237,237,237,,237,237',
',,162,162,,,,,,,,,,,,,131,,,,,,131,131,131,131,131,131,314,314,314,314',
',314,314,,,,131,237,237,237,,237,237,237,237,237,237,237,237,237,,,',
',,237,237,237,237,237,237,344,344,344,344,,344,344,,,237,237,314,314',
'314,,314,314,314,314,314,314,314,314,314,,,,,,314,314,314,314,314,314',
'361,361,361,361,,361,361,,,314,314,344,344,344,,344,344,344,344,344',
'344,344,344,344,,,,,,344,344,344,344,344,344,235,235,235,235,,235,235',
',,344,344,361,361,361,,361,361,361,361,361,361,361,361,361,,,,,,361',
'361,361,361,361,361,224,224,224,224,,224,224,,,361,361,235,235,235,',
'235,235,235,235,235,235,235,235,235,,,,,,235,235,235,235,235,235,346',
'346,346,346,,346,346,,,235,235,,,,,,,,,,,,,224,,,,,,224,224,224,224',
'224,224,364,364,364,364,,364,364,,,,224,346,346,346,,346,346,346,346',
'346,346,346,346,346,,,,,,346,346,346,346,346,346,359,359,359,359,,359',
'359,,,346,346,364,364,364,,364,364,364,364,364,364,364,364,364,,,,,',
'364,364,364,364,364,364,260,260,260,260,,260,260,,,364,364,359,359,359',
',359,359,359,359,359,359,359,359,359,,,,,,359,359,359,359,359,359,140',
'140,140,140,,140,140,,,359,359,,,,,,323,323,323,323,,323,323,260,,,',
',,260,260,260,260,260,260,189,189,189,189,,189,189,,,260,,,240,240,240',
'240,,240,240,,,,,140,,,,,,140,140,140,140,140,140,62,62,62,62,323,62',
'62,,,140,323,323,323,323,323,323,241,241,241,241,,241,241,189,,323,',
',,189,189,189,189,189,189,240,,,,,,240,240,240,240,240,240,244,244,244',
'244,,244,244,,,,,62,,,62,,,62,62,62,62,62,62,216,216,216,216,241,216',
'216,,,,241,241,241,241,241,241,255,255,255,255,,255,255,,,,,,210,210',
'210,210,,210,210,244,,,,,,244,244,244,244,244,244,209,209,209,209,,209',
'209,,,,,216,,,,,,216,216,216,216,216,216,208,208,208,208,255,208,208',
',,,255,255,255,255,255,255,210,,,,,,210,210,210,210,210,210,207,207',
'207,207,,207,207,209,,,,,,209,209,209,209,209,209,206,206,206,206,,206',
'206,,,,,208,,,,,,208,208,208,208,208,208,205,205,205,205,,205,205,,',
',,,203,203,203,203,207,203,203,,,,207,207,207,207,207,207,202,202,202',
'202,,202,202,206,,,,,,206,206,206,206,206,206,200,200,200,200,,200,200',
',,,,205,,,,,,205,205,205,205,205,205,203,,,,,,203,203,203,203,203,203',
'198,198,198,198,202,198,198,,,,202,202,202,202,202,202,197,197,197,197',
',197,197,200,,,,,,200,200,200,200,200,200,196,196,196,196,,196,196,',
',,,,269,269,269,269,,269,269,,,,,198,,,,,,198,198,198,198,198,198,109',
'109,109,109,197,109,109,,,,197,197,197,197,197,197,,,,,,,,196,,,,,,196',
'196,196,196,196,196,269,,,269,,,269,269,269,269,269,269,192,192,192',
'192,,192,192,,,,,109,,,,,,109,109,109,109,109,109,,,192,,,,,,192,192',
'192,192,192,192,192,192,192,192,192,192,192,192,110,110,110,110,,110',
'110,,,,,,,192,,,,,,192,192,192,192,192,192,110,,,,,,110,110,110,110',
'110,110,110,110,110,110,110,110,110,110,190,190,190,190,,190,190,,,',
',,,110,,,,,,110,110,110,110,110,110,113,113,113,113,,113,113,,,,,,239',
'239,239,239,,239,239,,,,,,187,187,187,187,,187,187,,,190,,,,,,190,190',
'190,190,190,190,117,117,117,117,,117,117,,,,,,,113,,,,,,113,113,113',
'113,113,113,239,,,,,,239,239,239,239,239,239,187,,,,,,187,187,187,187',
'187,187,186,186,186,186,,186,186,,,117,,,,,,117,117,117,117,117,117',
'185,185,185,185,,185,185,,,,,,291,291,291,291,,291,291,,,,,,184,184',
'184,184,,184,184,,,,,,,186,,,,,,186,186,186,186,186,186,181,181,181',
'181,,181,181,,,185,,,,,,185,185,185,185,185,185,291,,,,,,291,291,291',
'291,291,291,184,,,,,,184,184,184,184,184,184,308,308,308,308,,308,308',
',,,,,,181,,,,,,181,181,181,181,181,181,178,178,178,178,,178,178,,,,',
',177,177,177,177,,177,177,,,,,,333,333,333,333,,333,333,,,308,,,,,,308',
'308,308,308,308,308,176,176,176,176,,176,176,,,,,,,178,178,,,,,178,178',
'178,178,178,178,177,,,,,,177,177,177,177,177,177,333,,,,,,333,333,333',
'333,333,333,174,174,174,174,,174,174,,,176,,,,,,176,176,176,176,176',
'176,335,335,335,335,,335,335,,,,,,135,135,135,135,,135,135,,,,,,347',
'347,347,347,,347,347,,,,,,,174,,,174,,,174,174,174,174,174,174,348,348',
'348,348,,348,348,,,335,,,,,,335,335,335,335,335,335,135,,,,,,135,135',
'135,135,135,135,347,,,,,,347,347,347,347,347,347,147,147,147,147,,147',
'147,,,,29,29,29,348,348,,,,,348,348,348,348,348,348,104,104,104,104',
',104,104,,,,,,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29',
'29,29,,147,,,,,,147,147,147,147,147,147,29,0,0,,,,,29,,,,,,104,,,,,',
'104,104,104,104,104,104,,,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171',
',,,,,,,,,,,,0,,,,,,,0,,,,,171,171,171,171,171,171,171,171,171,171,171',
'171,171,171,171,171,171,171,171,171,61,,,,,,,,,,,,,171,171,171,,,,,171',
',,,,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,211',
',,,,,,,,,,,,,61,,,,,,55,,,,,,211,,,,,,211,211,211,211,211,211,211,211',
'211,211,211,211,211,211,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55',
'55,55,55,55,55,19,,,,,,,,,,,,,,,,,,,,132,,,,,,19,19,19,19,19,19,19,19',
'19,19,19,19,19,19,19,19,19,19,19,19,132,132,132,132,132,132,132,132',
'132,132,132,132,132,132,132,132,132,132,132,132,64,169,169,169,169,169',
'169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,,,,',
'64,,,,,,64,64,64,64,64,64,64,64,64,64,64,64,64,64,288,288,288,288,288',
'288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,,,,,,,,',
',,,,,288,288,288,,,,,288,268,268,268,268,268,268,268,268,268,268,268',
'268,268,268,268,268,268,268,268,268,,,,,,,,,,,,,,,268,13,13,13,13,13',
'13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,125,,,,,,125,125,125,125',
'125,125,125,125,125,125,125,125,125,125,15,15,15,15,15,15,15,15,15,15',
'15,15,15,15,15,15,15,15,15,15,11,11,11,11,11,11,11,11,11,11,11,11,11',
'11,11,11,11,11,11,11' ]
racc_action_check = arr = Array.new(2429, nil)
str = a = i = nil
idx = 0
clist.each do |str|
  str.split(',', -1).each do |i|
    arr[idx] = i.to_i unless i.empty?
    idx += 1
  end
end

racc_action_pointer = [
  1958,   nil,   nil,   -20,   nil,   439,   nil,   378,   nil,     4,
   nil,  2382,   131,  2322,   nil,  2362,    29,   nil,   nil,  2160,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1898,
   nil,   138,   nil,   nil,   nil,   -46,     3,   nil,   nil,     7,
   -18,   nil,   nil,   nil,   nil,   332,   411,   nil,   nil,   335,
   nil,   nil,   nil,    39,   318,  2114,   nil,     6,   411,   nil,
   231,  2048,   919,   335,  2226,   -63,   nil,   nil,   313,   nil,
   nil,   414,   330,    58,   nil,   nil,   nil,   147,   nil,   nil,
    56,    84,   nil,   148,   108,   nil,   158,   nil,   nil,     9,
   240,   nil,   309,   252,   nil,   288,   nil,   nil,   290,   nil,
   nil,   nil,   357,   nil,  1911,   nil,    78,   nil,   nil,  1281,
  1373,   nil,   177,  1443,   nil,   352,   262,  1488,   317,   nil,
    18,   nil,    -1,   338,   nil,  2342,   166,   341,   nil,   nil,
     8,   464,  2180,   341,   -64,  1804,   nil,   453,   376,   409,
   849,   413,   nil,   nil,   nil,   nil,   nil,  1886,   nil,   nil,
   401,   129,   nil,   413,   nil,   nil,   398,   217,   nil,   396,
    76,   217,   429,   385,   437,   nil,   nil,   nil,   436,  2201,
   nil,  2003,   219,   nil,  1771,    10,  1722,  1689,  1677,   419,
   nil,  1607,   nil,   418,  1582,  1558,  1537,  1467,   nil,   884,
  1418,   nil,  1328,   103,   331,    36,  1246,  1227,  1211,   nil,
  1176,   nil,  1157,  1141,   nil,  1129,  1106,  1087,  1059,  1036,
  1017,  2094,   nil,   nil,   nil,   nil,   989,   167,   nil,   -28,
   nil,   nil,   nil,   nil,   674,   nil,   330,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   146,   639,   152,   499,   nil,  1455,
   896,   935,   nil,   nil,   966,   nil,   253,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,  1005,   nil,   nil,   nil,   356,
   814,   313,   nil,   nil,   nil,   201,   374,   nil,  2287,  1258,
    64,   nil,   -12,    87,    16,   217,   nil,   nil,   nil,    74,
   nil,   394,   214,   214,   227,   -62,   313,   278,  2246,   nil,
   -47,  1570,   nil,   nil,   nil,   nil,   179,   222,   337,   335,
   381,   379,   328,   323,    19,   nil,   nil,    93,  1652,   nil,
   -58,   nil,   nil,   nil,   534,   nil,   nil,   203,   198,   231,
   nil,   nil,   362,   865,   nil,   nil,   nil,   369,   nil,   -59,
   nil,   nil,   nil,  1701,   nil,  1792,   nil,   nil,   nil,   nil,
   nil,   nil,   358,   nil,   569,   394,   709,  1816,  1841,   nil,
   nil,   nil,   nil,   nil,   nil,   419,   nil,   nil,   147,   779,
   264,   604,   410,   nil,   744,   nil,   nil,   nil ]

racc_action_default = [
  -227,  -115,   -95,  -150,  -116,   -97,   -78,  -227,  -143,  -227,
   -98,   -79,  -102,   -81,  -106,   -83,  -227,  -110,  -107,  -225,
  -215,  -103,   -89,  -217,  -105,   -90,  -139,  -108,   -91,  -227,
  -218,  -227,  -140,  -109,   -92,  -142,  -227,   -94,   -93,  -227,
  -151,  -154,  -152,   -96,   -77,  -134,  -227,   -80,  -101,  -100,
  -104,   -82,   -84,  -227,  -227,  -223,  -197,  -227,  -227,  -216,
  -141,  -227,  -227,  -114,  -227,  -227,   -75,   -85,   -87,  -155,
  -153,  -227,  -137,  -227,  -135,   -99,  -144,  -227,  -226,  -198,
  -227,   -87,   368,  -227,  -227,  -163,  -156,  -158,  -149,  -162,
   -47,   -21,   -15,   -49,   -22,   -51,   -23,    -1,   -53,   -27,
   -24,    -2,   -55,   -25,  -227,    -3,   -57,   -29,   -26,  -227,
  -227,   -74,   -33,  -227,  -146,  -227,   -36,  -227,   -39,    -5,
   -44,  -111,  -227,  -227,  -117,  -124,  -227,  -126,  -122,   -76,
  -227,  -227,  -219,  -227,  -227,  -227,  -132,  -227,  -227,  -227,
  -227,    -1,  -201,  -199,  -193,  -184,  -185,  -227,   -59,  -186,
  -227,  -227,  -187,  -227,  -188,  -189,  -227,  -227,   -72,  -227,
  -227,   -27,  -227,  -227,  -227,  -224,  -147,  -148,  -227,  -227,
  -161,  -227,  -168,  -160,  -227,  -167,  -227,  -227,  -227,  -227,
   -11,  -227,   -12,  -227,  -227,  -227,  -227,  -227,   -18,  -227,
  -227,   -19,  -227,  -165,  -227,  -227,  -227,  -227,  -227,   -16,
  -227,  -145,  -227,  -227,   -17,  -227,  -227,  -227,  -227,  -227,
  -227,  -227,  -118,  -113,  -121,  -123,  -227,  -227,  -119,  -129,
  -127,  -125,   -86,  -179,  -227,   -88,  -227,  -222,  -133,  -138,
  -136,  -211,  -212,  -213,  -227,  -227,  -227,  -227,  -202,  -227,
  -227,  -227,  -194,  -200,  -227,  -195,  -227,   -67,   -68,   -69,
   -70,   -61,   -71,   -62,   -63,  -227,   -64,   -65,   -66,  -227,
  -227,  -227,  -164,  -157,  -159,  -227,  -227,  -175,  -227,  -227,
  -227,  -171,  -169,   -45,   -46,  -227,   -13,    -7,   -10,  -227,
    -9,   -48,   -50,   -52,   -54,  -227,   -56,  -227,  -227,  -166,
  -167,  -227,    -4,   -30,   -31,   -32,   -34,   -35,   -37,   -38,
   -42,   -43,   -40,   -41,  -227,  -130,  -120,  -227,  -227,  -182,
  -227,  -220,  -214,  -190,  -227,  -192,   -73,  -227,  -227,  -227,
  -196,   -60,  -227,  -227,  -210,  -176,  -170,  -227,  -177,  -227,
  -173,  -172,    -8,  -227,    -6,  -227,   -20,   -28,  -112,  -128,
  -131,  -180,  -227,  -191,  -227,  -227,  -227,  -227,  -227,  -178,
  -174,   -14,   -58,  -181,  -183,  -203,  -205,  -206,  -227,  -227,
  -227,  -227,  -227,  -208,  -227,  -204,  -207,  -209 ]

racc_goto_table = [
    41,    53,    39,   225,    42,   188,   125,    30,   111,    78,
    60,    83,   220,   195,   212,   272,   122,   170,   157,   323,
   193,   115,   194,    73,    68,    20,    29,   215,    55,   221,
    47,    39,    51,   223,    52,   165,    30,    69,   296,   297,
   217,    70,    81,   234,   300,   301,   302,   303,   134,   273,
   274,   211,   125,   230,    59,   298,   299,    84,    40,   264,
   222,   127,    79,    89,   125,   255,   310,   125,   286,   125,
   243,   284,   283,   282,   173,   259,    99,   132,   281,   275,
   276,   111,   348,   226,   279,   133,   160,    80,   227,    54,
   175,   nil,   285,   111,   229,   195,   309,   293,   294,   295,
   nil,   246,   193,   195,   287,   nil,   236,   127,   nil,   nil,
   nil,   219,   nil,   nil,   nil,    81,   nil,   nil,    99,   127,
   111,   289,   127,   191,   127,   nil,   223,   199,   nil,   nil,
   272,   204,   nil,   270,   125,   nil,   nil,   nil,   nil,    79,
   nil,   316,   nil,   317,   318,   nil,   nil,   319,   313,    99,
   315,   nil,   nil,   125,    60,   nil,    53,   321,   nil,   243,
   nil,    99,   111,   304,   nil,   nil,   nil,    79,   nil,   nil,
   nil,    89,   175,    89,   nil,   305,   nil,   nil,   nil,   nil,
   nil,   311,   nil,   nil,   nil,   nil,   nil,   nil,    99,   127,
    99,    99,   337,   339,   290,   nil,   212,   nil,    99,    99,
    99,    99,   nil,   nil,    99,   nil,   nil,   nil,   127,   nil,
    99,    99,    99,   nil,   354,   111,    99,    99,   327,    99,
    99,    99,    99,    99,    99,   nil,   nil,   343,   329,   nil,
    99,   nil,   nil,   nil,   nil,   351,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   223,   nil,   125,   nil,   nil,   nil,
   358,   360,   nil,   nil,   111,   nil,   nil,   355,   356,   357,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   340,   nil,   nil,
    89,   nil,   363,   nil,   365,   nil,   nil,   367,   nil,   nil,
   nil,   352,   nil,    99,   nil,   nil,   nil,   nil,   nil,   290,
    89,   nil,   219,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   127,   nil,   nil,   nil,    99,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    99,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    99 ]

racc_goto_check = [
    30,    32,    25,    33,    46,     9,    29,    24,    21,    58,
    47,    48,    43,     3,    39,    54,    37,    53,    63,    59,
    40,    23,    10,    44,    32,    65,     1,    42,    64,    42,
    27,    25,    27,     6,    27,    58,    24,    30,    11,    11,
    41,    46,    32,     3,    13,    13,    13,    13,    44,    14,
    14,    38,    29,    45,    65,    12,    12,    49,    50,    52,
    31,    30,    24,    25,    29,    22,    55,    29,    19,    29,
    56,    18,    17,    16,    32,    56,     7,    64,    15,     5,
     6,    21,    59,    67,     3,    68,    64,    69,    58,    70,
    46,   nil,     3,    21,    23,     3,    33,     9,     9,     9,
   nil,    63,    40,     3,    10,   nil,    23,    30,   nil,   nil,
   nil,    32,   nil,   nil,   nil,    32,   nil,   nil,     7,    30,
    21,    53,    30,     7,    30,   nil,     6,     7,   nil,   nil,
    54,     7,   nil,    23,    29,   nil,   nil,   nil,   nil,    24,
   nil,     6,   nil,     3,     3,   nil,   nil,     3,    56,     7,
    56,   nil,   nil,    29,    47,   nil,    32,     6,   nil,    56,
   nil,     7,    21,    37,   nil,   nil,   nil,    24,   nil,   nil,
   nil,    25,    46,    25,   nil,    23,   nil,   nil,   nil,   nil,
   nil,    58,   nil,   nil,   nil,   nil,   nil,   nil,     7,    30,
     7,     7,     9,    43,    46,   nil,    39,   nil,     7,     7,
     7,     7,   nil,   nil,     7,   nil,   nil,   nil,    30,   nil,
     7,     7,     7,   nil,    33,    21,     7,     7,    48,     7,
     7,     7,     7,     7,     7,   nil,   nil,    56,    23,   nil,
     7,   nil,   nil,   nil,   nil,     6,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     6,   nil,    29,   nil,   nil,   nil,
     3,     3,   nil,   nil,    21,   nil,   nil,    56,    56,    56,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    23,   nil,   nil,
    25,   nil,    56,   nil,    56,   nil,   nil,    56,   nil,   nil,
   nil,    21,   nil,     7,   nil,   nil,   nil,   nil,   nil,    46,
    25,   nil,    32,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    30,   nil,   nil,   nil,     7,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     7,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     7 ]

racc_goto_pointer = [
   nil,    26,   nil,   -97,   nil,   -99,   -98,    14,   nil,   -99,
   -88,  -164,  -150,  -163,  -127,  -106,  -112,  -114,  -116,  -122,
   nil,   -54,   -96,   -41,     7,     2,   nil,    19,   nil,   -58,
    -3,   -70,   -15,  -128,   nil,   nil,   nil,   -48,   -70,  -108,
   -90,   -86,   -98,  -114,   -23,   -84,     1,   -21,   -50,    -4,
    55,   nil,  -110,   -72,  -160,  -158,   -87,   nil,   -45,  -241,
   nil,   nil,   nil,   -59,     9,    25,   nil,   -49,    17,    32,
    70 ]

racc_goto_default = [
   nil,   nil,   119,   151,    92,   nil,   158,   161,   104,   107,
   nil,   112,   116,   118,   120,    90,    93,    95,    98,   102,
   106,   148,   nil,   nil,    56,    57,    65,     6,    11,    13,
    15,    67,    19,   nil,    27,    33,    36,   nil,   nil,   124,
   126,   nil,   128,   nil,   nil,    74,    31,    35,   265,   nil,
   nil,    86,    87,   266,   172,   nil,   143,   145,   146,   149,
   152,   154,   155,   nil,   nil,   nil,    23,   nil,   nil,   nil,
   nil ]

racc_token_table = {
 false => 0,
 Object.new => 1,
 :IDENTIFIER => 2,
 :CONSTANT => 3,
 :STRING_LITERAL => 4,
 :SIZEOF => 5,
 :PTR_OP => 6,
 :INC_OP => 7,
 :DEC_OP => 8,
 :LEFT_OP => 9,
 :RIGHT_OP => 10,
 :LE_OP => 11,
 :GE_OP => 12,
 :EQ_OP => 13,
 :NE_OP => 14,
 :AND_OP => 15,
 :OR_OP => 16,
 :MUL_ASSIGN => 17,
 :DIV_ASSIGN => 18,
 :MOD_ASSIGN => 19,
 :ADD_ASSIGN => 20,
 :SUB_ASSIGN => 21,
 :LEFT_ASSIGN => 22,
 :RIGHT_ASSIGN => 23,
 :AND_ASSIGN => 24,
 :XOR_ASSIGN => 25,
 :OR_ASSIGN => 26,
 :TYPE_NAME => 27,
 :TYPEDEF => 28,
 :EXTERN => 29,
 :STATIC => 30,
 :AUTO => 31,
 :REGISTER => 32,
 :CHAR => 33,
 :SHORT => 34,
 :INT => 35,
 :LONG => 36,
 :SIGNED => 37,
 :UNSIGNED => 38,
 :FLOAT => 39,
 :DOUBLE => 40,
 :CONST => 41,
 :VOLATILE => 42,
 :VOID => 43,
 :STRUCT => 44,
 :UNION => 45,
 :ENUM => 46,
 :ELLIPSIS => 47,
 :CASE => 48,
 :DEFAULT => 49,
 :IF => 50,
 :ELSE => 51,
 :SWITCH => 52,
 :WHILE => 53,
 :DO => 54,
 :FOR => 55,
 :GOTO => 56,
 :CONTINUE => 57,
 :BREAK => 58,
 :RETURN => 59,
 "(" => 60,
 ")" => 61,
 "[" => 62,
 "]" => 63,
 "." => 64,
 "," => 65,
 "&" => 66,
 "*" => 67,
 "+" => 68,
 "-" => 69,
 "~" => 70,
 "!" => 71,
 "/" => 72,
 "%" => 73,
 "<" => 74,
 ">" => 75,
 "^" => 76,
 "|" => 77,
 "?" => 78,
 ":" => 79,
 "=" => 80,
 ";" => 81,
 "{" => 82,
 "}" => 83 }

racc_use_result_var = true

racc_nt_base = 84

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'IDENTIFIER',
'CONSTANT',
'STRING_LITERAL',
'SIZEOF',
'PTR_OP',
'INC_OP',
'DEC_OP',
'LEFT_OP',
'RIGHT_OP',
'LE_OP',
'GE_OP',
'EQ_OP',
'NE_OP',
'AND_OP',
'OR_OP',
'MUL_ASSIGN',
'DIV_ASSIGN',
'MOD_ASSIGN',
'ADD_ASSIGN',
'SUB_ASSIGN',
'LEFT_ASSIGN',
'RIGHT_ASSIGN',
'AND_ASSIGN',
'XOR_ASSIGN',
'OR_ASSIGN',
'TYPE_NAME',
'TYPEDEF',
'EXTERN',
'STATIC',
'AUTO',
'REGISTER',
'CHAR',
'SHORT',
'INT',
'LONG',
'SIGNED',
'UNSIGNED',
'FLOAT',
'DOUBLE',
'CONST',
'VOLATILE',
'VOID',
'STRUCT',
'UNION',
'ENUM',
'ELLIPSIS',
'CASE',
'DEFAULT',
'IF',
'ELSE',
'SWITCH',
'WHILE',
'DO',
'FOR',
'GOTO',
'CONTINUE',
'BREAK',
'RETURN',
'"("',
'")"',
'"["',
'"]"',
'"."',
'","',
'"&"',
'"*"',
'"+"',
'"-"',
'"~"',
'"!"',
'"/"',
'"%"',
'"<"',
'">"',
'"^"',
'"|"',
'"?"',
'":"',
'"="',
'";"',
'"{"',
'"}"',
'$start',
'translation_unit',
'primary_expression',
'expression',
'postfix_expression',
'argument_expression_list',
'assignment_expression',
'unary_expression',
'unary_operator',
'cast_expression',
'type_name',
'multiplicative_expression',
'additive_expression',
'shift_expression',
'relational_expression',
'equality_expression',
'and_expression',
'exclusive_or_expression',
'inclusive_or_expression',
'logical_and_expression',
'logical_or_expression',
'conditional_expression',
'assignment_operator',
'constant_expression',
'declaration',
'declaration_specifiers',
'init_declarator_list',
'declaration_specifiers_base',
'storage_class_specifier',
'type_specifier',
'type_qualifier',
'init_declarator',
'declarator',
'initializer',
'struct_or_union_specifier',
'enum_specifier',
'struct_or_union',
'struct_declaration_list',
'@1',
'struct_declaration',
'specifier_qualifier_list',
'struct_declarator_list',
'specifier_qualifier_list_base',
'struct_declarator',
'enumerator_list',
'enumerator',
'pointer',
'direct_declarator',
'parameter_type_list',
'identifier_list',
'type_qualifier_list',
'parameter_list',
'parameter_declaration',
'abstract_declarator',
'direct_abstract_declarator',
'initializer_list',
'statement',
'labeled_statement',
'compound_statement',
'expression_statement',
'selection_statement',
'iteration_statement',
'jump_statement',
'statement_list',
'declaration_list',
'external_declaration',
'function_definition',
'@2',
'@3',
'@4',
'@5']

Racc_debug_parser = false

##### racc system variables end #####

 # reduce 0 omitted

 # reduce 1 omitted

module_eval <<'.,.,', 'Crubyparse.y', 23
  def _reduce_2( val, _values, result )
 return((val[0] =~ /^0[^\.]/) ? val[0].oct : val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 24
  def _reduce_3( val, _values, result )
 return(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 25
  def _reduce_4( val, _values, result )
 return(val[1])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 28
  def _reduce_5( val, _values, result )
 return(val[0])
   result
  end
.,.,

 # reduce 6 omitted

 # reduce 7 omitted

 # reduce 8 omitted

 # reduce 9 omitted

 # reduce 10 omitted

 # reduce 11 omitted

 # reduce 12 omitted

module_eval <<'.,.,', 'Crubyparse.y', 38
  def _reduce_13( val, _values, result )
 return(val[0])
   result
  end
.,.,

 # reduce 14 omitted

module_eval <<'.,.,', 'Crubyparse.y', 42
  def _reduce_15( val, _values, result )
 return(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 43
  def _reduce_16( val, _values, result )
 return(val[1].to_i + 1)
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 44
  def _reduce_17( val, _values, result )
 return(val[1].to_i - 1)
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 55
  def _reduce_18( val, _values, result )
 if val[0].eql?'-'
                                                    return(-val[1].to_i)
                                                  elsif val[0].eql?'+'
                                                    return( val[1].to_i) 
                                                  elsif val[0].eql?'~'
                                                    return(~(val[1].to_i)) 
                                                  elsif val[0].eql?'!'
                                                    return(val[1].to_i > 0 ? 0 : 1)
                                                  else
                                                    return(val[1].to_i) 
                                                  end
   result
  end
.,.,

 # reduce 19 omitted

module_eval <<'.,.,', 'Crubyparse.y', 57
  def _reduce_20( val, _values, result )
 return( size_of(val[2][".type"]) )
   result
  end
.,.,

 # reduce 21 omitted

 # reduce 22 omitted

 # reduce 23 omitted

 # reduce 24 omitted

 # reduce 25 omitted

 # reduce 26 omitted

module_eval <<'.,.,', 'Crubyparse.y', 68
  def _reduce_27( val, _values, result )
 return(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 69
  def _reduce_28( val, _values, result )
 return(val[1])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 72
  def _reduce_29( val, _values, result )
 return(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 73
  def _reduce_30( val, _values, result )
 return(val[0].to_i * 1)
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 74
  def _reduce_31( val, _values, result )
 return(val[0].to_i / val[2].to_i)
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 75
  def _reduce_32( val, _values, result )
 return(val[0].to_i % val[2].to_i)
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 78
  def _reduce_33( val, _values, result )
 return(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 79
  def _reduce_34( val, _values, result )
 return(val[0].to_i + val[2].to_i)
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 80
  def _reduce_35( val, _values, result )
 return(val[0].to_i - val[2].to_i)
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 83
  def _reduce_36( val, _values, result )
 return(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 84
  def _reduce_37( val, _values, result )
 return(val[0].to_i << val[2].to_i)
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 85
  def _reduce_38( val, _values, result )
 return(val[0].to_i >> val[2].to_i)
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 88
  def _reduce_39( val, _values, result )
 return(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 89
  def _reduce_40( val, _values, result )
 return((val[0].to_i <  val[2].to_i) ? 1 : 0)
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 90
  def _reduce_41( val, _values, result )
 return((val[0].to_i >  val[2].to_i) ? 1 : 0)
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 91
  def _reduce_42( val, _values, result )
 return((val[0].to_i <= val[2].to_i) ? 1 : 0)
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 92
  def _reduce_43( val, _values, result )
 return((val[0].to_i >= val[2].to_i) ? 1 : 0)
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 95
  def _reduce_44( val, _values, result )
 return(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 96
  def _reduce_45( val, _values, result )
 return((val[0].to_i == val[2].to_i) ? 1 : 0)
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 97
  def _reduce_46( val, _values, result )
 return((val[0].to_i != val[2].to_i) ? 1 : 0)
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 100
  def _reduce_47( val, _values, result )
 return(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 101
  def _reduce_48( val, _values, result )
 return(val[0].to_i & val[2].to_i)
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 104
  def _reduce_49( val, _values, result )
 return(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 105
  def _reduce_50( val, _values, result )
 return(val[0].to_i ^ val[2].to_i)
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 108
  def _reduce_51( val, _values, result )
 return(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 109
  def _reduce_52( val, _values, result )
 return(val[0].to_i | val[2].to_i)
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 112
  def _reduce_53( val, _values, result )
 return(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 113
  def _reduce_54( val, _values, result )
 return(((val[0].to_i > 0) && (val[2].to_i > 0)) ? 1 : 0)
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 116
  def _reduce_55( val, _values, result )
 return(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 117
  def _reduce_56( val, _values, result )
 return(((val[0].to_i > 0) || (val[2].to_i > 0)) ? 1 : 0)
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 120
  def _reduce_57( val, _values, result )
 return(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 121
  def _reduce_58( val, _values, result )
 return((val[0].to_i > 0) ? val[2] : val[4])
   result
  end
.,.,

 # reduce 59 omitted

 # reduce 60 omitted

 # reduce 61 omitted

 # reduce 62 omitted

 # reduce 63 omitted

 # reduce 64 omitted

 # reduce 65 omitted

 # reduce 66 omitted

 # reduce 67 omitted

 # reduce 68 omitted

 # reduce 69 omitted

 # reduce 70 omitted

 # reduce 71 omitted

 # reduce 72 omitted

 # reduce 73 omitted

module_eval <<'.,.,', 'Crubyparse.y', 145
  def _reduce_74( val, _values, result )
 return(val[0])
   result
  end
.,.,

 # reduce 75 omitted

module_eval <<'.,.,', 'Crubyparse.y', 149
  def _reduce_76( val, _values, result )
 declare(val[0], val[1])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 150
  def _reduce_77( val, _values, result )
 return( [[val[0], {".type"=>"error"}]])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 154
  def _reduce_78( val, _values, result )
 return ((val[0] == nil) || val[0].has_key?('.type') ? val[0] : 
                                          merge_hashes(val[0], {'.type' => 'int'}))
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 157
  def _reduce_79( val, _values, result )
 return(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 158
  def _reduce_80( val, _values, result )
 return(merge_hashes(val[0], val[1]))
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 159
  def _reduce_81( val, _values, result )
 return(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 160
  def _reduce_82( val, _values, result )
 return(merge_hashes(val[0], val[1]))
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 161
  def _reduce_83( val, _values, result )
 return(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 162
  def _reduce_84( val, _values, result )
 return(merge_hashes(val[0], val[1]))
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 165
  def _reduce_85( val, _values, result )
 return ([val[0]])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 166
  def _reduce_86( val, _values, result )
 return (val[0].push(val[2]))
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 169
  def _reduce_87( val, _values, result )
 return(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 170
  def _reduce_88( val, _values, result )
 return([val[0][0], {'.type' => val[2]}])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 174
  def _reduce_89( val, _values, result )
 return({'.storage' => val[0]})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 175
  def _reduce_90( val, _values, result )
 return({'.storage' => val[0]})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 176
  def _reduce_91( val, _values, result )
 return({'.storage' => val[0]})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 177
  def _reduce_92( val, _values, result )
 return({'.storage' => val[0]})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 178
  def _reduce_93( val, _values, result )
 return({'.storage' => val[0]})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 181
  def _reduce_94( val, _values, result )
 return({'.type' => val[0]})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 182
  def _reduce_95( val, _values, result )
 return({'.type' => val[0]})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 183
  def _reduce_96( val, _values, result )
 return({'.type' => val[0]})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 184
  def _reduce_97( val, _values, result )
 return({'.type' => val[0]})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 185
  def _reduce_98( val, _values, result )
 return({'.type' => val[0]})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 186
  def _reduce_99( val, _values, result )
 return({'.type' => 'longlong'})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 187
  def _reduce_100( val, _values, result )
 return({'.type' => 'longlong'})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 188
  def _reduce_101( val, _values, result )
 return({'.type' => val[0]})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 189
  def _reduce_102( val, _values, result )
 return({'.type' => val[0]})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 190
  def _reduce_103( val, _values, result )
 return({'.type' => val[0]})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 191
  def _reduce_104( val, _values, result )
 return({'.type' => val[1]})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 192
  def _reduce_105( val, _values, result )
 return({'.type' => val[0]})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 193
  def _reduce_106( val, _values, result )
 return({'.signed' => 'signed'})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 194
  def _reduce_107( val, _values, result )
 return({'.signed' => 'unsigned'})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 195
  def _reduce_108( val, _values, result )
 return(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 196
  def _reduce_109( val, _values, result )
 return(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 197
  def _reduce_110( val, _values, result )
 return(get_table(@@typedef_table, val[0]))
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 205
  def _reduce_111( val, _values, result )
 typeval = _values[-3].clone
                nameval = _values[-2].clone
                @@name = nameval
                table = (typeval['.type'].eql?'union') ? @@uniontag_table : @@structtag_table
                insert_table(table, nameval, {})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 215
  def _reduce_112( val, _values, result )
 table = (val[0]['.type'].eql?'union') ? @@uniontag_table : @@structtag_table
                insert_table(table, val[1], struct_union_construct(val[0], \
                             val[4]).merge({'.type_or_id_name' => "(Struct/Union): #{val[1]}"}))
		c = get_table(table, val[1])
		if c.nil?
                  insert_table(table, val[1], {'.type' => val[0]['.type']}) 
                end
                fixup(@@name) # completes forward declared typedefs                
                return c
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 217
  def _reduce_113( val, _values, result )
 return struct_union_construct(val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 227
  def _reduce_114( val, _values, result )
 table = (val[0]['.type'].eql?'union') ? @@uniontag_table : @@structtag_table
                c = get_table(table, val[1])
                if c.nil?
                  insert_table(table, val[1], {'.type' => val[0]['.type']}) 
                end 
                if c.nil? # in case of forward declared in typedef
                  c = {'.forward_type' => val[0]['.type'], '.forward_base_name' => val[1]}
                end
                return c
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 230
  def _reduce_115( val, _values, result )
 return({'.type' => val[0]})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 231
  def _reduce_116( val, _values, result )
 return({'.type' => val[0]})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 234
  def _reduce_117( val, _values, result )
 return(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 235
  def _reduce_118( val, _values, result )
 (val[1][0][1][".type"] == "error" ? (puts " error " ) : ( val[1].each { |elem| val[0].push(elem) } ))
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 242
  def _reduce_119( val, _values, result )
 return(struct_union_declare(val[0][".members"][0][1], val[0][".members"]))
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 243
  def _reduce_120( val, _values, result )
 return(struct_union_declare(val[0], val[1]))
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 244
  def _reduce_121( val, _values, result )
 return( [[val[0], {".type"=>"error"}]] )
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 249
  def _reduce_122( val, _values, result )
 return ((val[0] == nil) || val[0].has_key?('.type') ? val[0] : 
                                             merge_hashes(val[0], {'.type' => 'int'}))
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 253
  def _reduce_123( val, _values, result )
 return(merge_hashes(val[0], val[1]))
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 254
  def _reduce_124( val, _values, result )
 return(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 255
  def _reduce_125( val, _values, result )
 return(merge_hashes(val[0], val[1]))
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 256
  def _reduce_126( val, _values, result )
 return(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 259
  def _reduce_127( val, _values, result )
 return([val[0]])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 260
  def _reduce_128( val, _values, result )
 return(val[0].push(val[2]))
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 263
  def _reduce_129( val, _values, result )
 return(val[0])
   result
  end
.,.,

 # reduce 130 omitted

 # reduce 131 omitted

module_eval <<'.,.,', 'Crubyparse.y', 269
  def _reduce_132( val, _values, result )
 return({'.type' =>'enum', '.values'=> create_enum_hash(val[2])})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 279
  def _reduce_133( val, _values, result )
 c = get_table(@@enumtag_table, val[1])
          if c.nil?
            c = insert_table(@@enumtag_table, val[1], {'.type'=>'enum', '.values' => create_enum_hash(val[3]),
                                                       '.type_or_id_name'=>"(enum): #{val[1]}"}) 
          end
          return c
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 285
  def _reduce_134( val, _values, result )
 c = get_table(@@enumtag_table, val[1])
                                   if c.nil?
                                     insert_table(@@enumtag_table, val[1], {})
                                   end
                                   return c
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 288
  def _reduce_135( val, _values, result )
 return([val[0]])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 289
  def _reduce_136( val, _values, result )
 return(val[0].push(val[2]))
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 292
  def _reduce_137( val, _values, result )
 return([val[0], nil])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 293
  def _reduce_138( val, _values, result )
 return([val[0], val[2]])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 296
  def _reduce_139( val, _values, result )
 return({'.type_qualifier' => val[0]})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 297
  def _reduce_140( val, _values, result )
 return({'.type_qualifier' => val[0]})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 300
  def _reduce_141( val, _values, result )
 return([val[1][0], link_type(val[1][1], val[0])])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 301
  def _reduce_142( val, _values, result )
 return(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 304
  def _reduce_143( val, _values, result )
 return([val[0], nil])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 305
  def _reduce_144( val, _values, result )
 return(val[1])
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 307
  def _reduce_145( val, _values, result )
 return [val[0][0], link_type(val[0][1], {'.type' =>'array', '.array_size' => val[2]})]
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 309
  def _reduce_146( val, _values, result )
 return [val[0][0], link_type(val[0][1], {'.type' =>'array', '.array_size' => 1})]
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 311
  def _reduce_147( val, _values, result )
 return [val[0][0], link_type(val[0][1], {'.type' => 'function'})]
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 313
  def _reduce_148( val, _values, result )
 return [val[0][0], link_type(val[0][1], {'.type' => 'function'})]
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 314
  def _reduce_149( val, _values, result )
 return [val[0][0], link_type(val[0][1], {'.type' => 'function'})]
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 317
  def _reduce_150( val, _values, result )
 return({'.type' =>'pointer'})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 318
  def _reduce_151( val, _values, result )
 return(merge_hashes(val[1], {'.type' =>'pointer'}))
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 319
  def _reduce_152( val, _values, result )
 return({'.type' =>'pointer', '.subtype'  => val[1]})
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 321
  def _reduce_153( val, _values, result )
 return(merge_hashes(val[1], {'.type' =>'pointer', '.subtype'  => val[2]}))
   result
  end
.,.,

 # reduce 154 omitted

 # reduce 155 omitted

 # reduce 156 omitted

 # reduce 157 omitted

 # reduce 158 omitted

 # reduce 159 omitted

 # reduce 160 omitted

 # reduce 161 omitted

 # reduce 162 omitted

 # reduce 163 omitted

 # reduce 164 omitted

 # reduce 165 omitted

 # reduce 166 omitted

 # reduce 167 omitted

 # reduce 168 omitted

 # reduce 169 omitted

 # reduce 170 omitted

 # reduce 171 omitted

 # reduce 172 omitted

 # reduce 173 omitted

 # reduce 174 omitted

 # reduce 175 omitted

 # reduce 176 omitted

 # reduce 177 omitted

 # reduce 178 omitted

 # reduce 179 omitted

 # reduce 180 omitted

 # reduce 181 omitted

 # reduce 182 omitted

 # reduce 183 omitted

 # reduce 184 omitted

 # reduce 185 omitted

 # reduce 186 omitted

 # reduce 187 omitted

 # reduce 188 omitted

 # reduce 189 omitted

 # reduce 190 omitted

 # reduce 191 omitted

 # reduce 192 omitted

 # reduce 193 omitted

 # reduce 194 omitted

 # reduce 195 omitted

 # reduce 196 omitted

 # reduce 197 omitted

module_eval <<'.,.,', 'Crubyparse.y', 394
  def _reduce_198( val, _values, result )
 (val[1][0][1][".type"] == "error" ? (puts " error ") : (puts "no error"))
   result
  end
.,.,

 # reduce 199 omitted

 # reduce 200 omitted

 # reduce 201 omitted

 # reduce 202 omitted

 # reduce 203 omitted

 # reduce 204 omitted

 # reduce 205 omitted

 # reduce 206 omitted

 # reduce 207 omitted

 # reduce 208 omitted

 # reduce 209 omitted

 # reduce 210 omitted

 # reduce 211 omitted

 # reduce 212 omitted

 # reduce 213 omitted

 # reduce 214 omitted

module_eval <<'.,.,', 'Crubyparse.y', 424
  def _reduce_215( val, _values, result )
 [@@symbol_table, @@structtag_table, @@typedef_table, @@uniontag_table, @@enumtag_table]
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 425
  def _reduce_216( val, _values, result )
 [@@symbol_table, @@structtag_table, @@typedef_table, @@uniontag_table, @@enumtag_table]
   result
  end
.,.,

 # reduce 217 omitted

 # reduce 218 omitted

module_eval <<'.,.,', 'Crubyparse.y', 435
  def _reduce_219( val, _values, result )
 push_all_table_contexts()
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 435
  def _reduce_220( val, _values, result )
 pop_all_table_contexts()
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 436
  def _reduce_221( val, _values, result )
 push_all_table_contexts()
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 436
  def _reduce_222( val, _values, result )
 pop_all_table_contexts()
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 437
  def _reduce_223( val, _values, result )
 push_all_table_contexts()
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 437
  def _reduce_224( val, _values, result )
 pop_all_table_contexts()
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 438
  def _reduce_225( val, _values, result )
 push_all_table_contexts()
   result
  end
.,.,

module_eval <<'.,.,', 'Crubyparse.y', 438
  def _reduce_226( val, _values, result )
 pop_all_table_contexts()
   result
  end
.,.,

 def _reduce_none( val, _values, result )
  result
 end

end   # class Crubyparse


#
# Returns number of bytes of the specified data type
#
def size_of(val)
   case val 
   when (val == 'long' )
      return(4)
   when (val == 'longlong' )
      return(8)
   when (val == 'char' )
      return(1)
   when (val == 'double' )
      return(8)
   when (val == 'float' )
      return(4)
   when (val == 'int' )
      return(4)
   when (val == 'short' )
      return(2)
   else
      return(1)
   end
end

#
# Error report gets displayed on screen. If the parameter is omitted, will report
# a Syntax Error and cite the offending line. Otherwise, the text given in the
# parameter will be cited verbatim.
#
def error_report(text="")
  if text.eql?""
    puts "Syntax Error: \"#{@@inputarr[@@line_number-1]}\""
    #if @@options.debug
      write_error_report_to_file "Syntax Error: \"#{@@inputarr[@@line_number-1]}\""
    #end
  else
    puts "#{text}"
    #if @@options.debug
      write_error_report_to_file "#{text}"
    #end
  end
end

#
# Write all parsing errors to an error file 2013-07-26
#
def write_error_report_to_file(text)
   File.open("errorfile", "a") do |er|
      er.write "#{text}"
   end
end
    
#
# Checks if an identifier is found in a table. Returns the value of the 
# identifier if found, else nil. The table is searched in reverse order
# to allow later entries to override previous entries.
#
def get_table(table, identifier)
  if table['quick_look'].has_key?(identifier)
    table['table_data'].reverse_each do |elem|
      return elem[1] if elem[0].eql?identifier
    end
  end
  return nil
end

#
# Inserts a new entry in the given table. 
# If the identifier already exists in the table, but its data is empty, 
# assigns the new data to it. If it already has data, this is seen
# as a redefinition and an error report is written, unless the previous
# definition was a forward declaration.
#
def insert_table(table, identifier, data)
  if existing_data = get_table(table, identifier)
     if existing_data.empty? || !existing_data.has_key?('.members')
      data.each { |key, value| existing_data[key] = value }
      return data
    else
      error_report "Error in insert_table: Redefinition of #{identifier}"
      raise ParseError
    end
  end

  table['table_data'].push([identifier, data])
  table['quick_look'][identifier] = 1
  return data
end

#
# Follows the nested chain of hashes given in hash1 until it finds the last 
# (innermost) entry (which will not have a '.subtype' key). It creates such
# a key for this entry, and inserts the contents of hash2 as its value, thereby
# creating a new link in the chain, nested one level deeper.
# Returns the modified hash1.
#
def link_type(hash1, hash2)
  return hash1 if hash2.nil?
  return hash2 if hash1.nil?

  current = hash1

  while current.has_key?('.subtype')
    current = current['.subtype']
  end
  current['.subtype'] = hash2
  return hash1
end

#
# Returns a hash of enum constants, where the key is the identifier and its value
# is the computed value, allowing for user defined enum assignments.
# A new entry is also inserted into the symbol table for each enum constant.
#
def create_enum_hash(enumarray)
  enum_value = -1
  enumhash = {}

  enumarray.each do |elem|
    if enumhash.has_key?(elem[0])
      error_report "Error in create_enum_list: Element redefinition: #{elem[0]}"
      raise ParseError
    end
    enum_value = (elem[1] == nil) ? enum_value + 1 : elem[1].to_i
    enumhash[elem[0]] = enum_value

    insert_table(@@symbol_table, elem[0], {'.type' =>'enum_const', '.value'=>enum_value, 
                 '.type_or_id_name' => "(Symbol): #{elem[0]}"})
  end

  return enumhash
end

#
# Returns a new hash consisting of hash2 merged to hash1. If key-value pairs with identical
# keys but different values exist in both hash1 and hash2, the former value will be
# overwritten by the latter. For type qualifiers this mechanism has been modified
# so the values are merged instead, allowing several type qualifiers to coexist.
#
def merge_hashes(hash1, hash2)
  merged_hash = hash1.clone
  return merged_hash if hash2.nil? || hash2.empty?

  if merged_hash.has_key?('.type_qualifier') && hash2.has_key?('.type_qualifier')
    hash2['.type_qualifier'] = "#{merged_hash['.type_qualifier']} #{hash2['.type_qualifier']}"
  end
  return merged_hash.merge!(hash2)
end

#
# Function called when either a variable or a type is declared.
# For each member in the declarator_list, containing [identifier, hash chain] 
# pairs, the following is done:
# The base type is inserted at the end of the declarator chain, and a new
# entry is inserted into the appropriate table, either the symbol_table
# or the typedef table.
#
def declare(base_type, declarator_list)
  basetype = base_type.clone

  if basetype.has_key?('.storage') and basetype['.storage'].eql?'typedef'
    target_table = @@typedef_table
    target_type = 'Type'
    if basetype.has_key?('.forward_type')
      basetype['.type'] = basetype['.forward_type']
      basetype.delete('.forward_type')
    end
  else
    target_table = @@symbol_table
    target_type = 'Symbol'
  end
  basetype.delete('.storage')

  declarator_list.each do |elem|
    current = elem[1]
    if !current.nil?
      while current.has_key?('.subtype') 
        current = current['.subtype']
      end
      current['.subtype'] = basetype
      data = elem[1].clone
    else
      data = basetype.clone
    end

    identifier = elem[0].clone
    if data.has_key?('.type_or_id_name')
      data['.base_ref_name'] = data['.type_or_id_name']
    end
    data['.type_or_id_name'] = "(#{target_type}): #{identifier}"
    insert_table(target_table, identifier, data)
  end
end

#
# Function called when a variable is declared inside a struct or union.
# For each member in the declarator_list, containing [identifier, hash chain] 
# pairs, the following is done:
# The base type is inserted at the end of the declarator chain, and a new
# entry is inserted into the array declare_array. This array is returned
# when the function finishes.
#
def struct_union_declare(base_type, declarator_list)
  basetype = base_type.clone
  declare_array = []
  
  declarator_list.each do |elem| 
    current = elem[1]

    if !current.nil?
      while current.has_key?('.subtype') 
        current = current['.subtype']
      end
      current['.subtype'] = basetype
      data = elem[1].clone
    else
      data = basetype
    end
    identifier = elem[0].clone
    declare_array.push([identifier, data])
  end

  return declare_array
end

#
# Returns a hash containing each member of a struct or union. Each
# member is represented as a name-type pair. The type is a chained
# hash describing a nested construct.
#
def struct_union_construct(base_type, member_list)
  con_hash = {'.type' => base_type['.type'].clone}  # struct or union 
  con_hash['.members'] = []

  member_list.each do |member|
    member_name = member[0]  # identifier
    member_type = member[1]  # chained hash

    con_hash['.members'].push([member_name, member_type])
  end

  return con_hash
end

#
# Pushes the context of a table onto the array "stack" when entering
# a function. What gets stored is not the actual contents of "table_data"
# but rather the number of elements currently present in "table_data".
# The contents of "table_data" is left unchanged.
#
def push_table_context(table)
  table['stack'].push(table['table_data'].length)
end

#
# Pushes the contexts of all tables onto their stacks
#
def push_all_table_contexts()
  [@@symbol_table, @@structtag_table, @@uniontag_table, @@enumtag_table, @@typedef_table].each do |table|
    push_table_context(table)
  end
end

#
# Pops the context back from "stack" when leaving a function. 
# The number of entries formerly present in "table_data" is popped
# off "stack", and this number of elements are then removed from
# the beginning of "table_data", leaving the rest unchanged.
# Since the removed elements are also present in the "quick_look"
# hash, these have to be removed also.
#
def pop_table_context(table)
  num_elem = table['stack'].pop
  removed = table['table_data'].slice!(0..num_elem-1)

  removed.each do |elem|
    table['quick_look'].delete(elem[0])
  end
end

#
# Pops the contexts of all tables from their stacks
#
def pop_all_table_contexts()
  [@@symbol_table, @@structtag_table, @@uniontag_table, @@enumtag_table, @@typedef_table].each do |table|
    pop_table_context(table)
  end
end

#
# If a forward declared struct/union in a typedef has been previously declared, 
# and the referenced struct/union is encountered, this routine will complete the 
# incomplete entry in the typedef table.
# 
#
def fixup(name)
  @@typedef_table['table_data'].each do |e|
    if e[1].has_key?('.forward_base_name') && e[1]['.forward_base_name'].eql?(name)
      table = (e[1]['.type'].eql?'union') ? @@uniontag_table : @@structtag_table
      table['table_data'].each do |g|
        if g[0].eql?(name)
          e[1]['.members'] = Marshal.load(Marshal.dump(g[1]['.members']))
          e[1].delete('.forward_base_name')
        end
      end
    end
  end
end

#
# Forward definitions in typedefs are allowed. Since we cannot distinguish between 
# structs or unions defined in typedefs or defined elsewhere, we have to perform a 
# final check that no incomplete definitions remain when parsing finishes. If this
# is the case it means the struct or union in question has not been defined. 
# We print an error message and terminate.
#
def check_undefined()
  errors = false
  @@typedef_table['table_data'].each do |e|
    if e[1].has_key?('.forward_base_name')
      etype = e[1].has_key?('.type') ? "#{e[1]['.type']} " : ""
      error_report("Error (in check_undefined() in Crubyparse): #{etype}\'#{e[1]['.forward_base_name']}\' is undefined") 
      errors = true
    end
  end
  @@structtag_table['table_data'].each do |e|
    if e[1].has_key?('.members')
      e[1]['.members'].each do |g|
        if g[1].has_key?('.forward_base_name')
          error_report("Error (in check_undefined() in Crubyparse): #{g[1]['.forward_type']} " +
            "\'#{g[1]['.forward_base_name']}\' is undefined")
          errors = true
        end
      end
    end
  end

  if errors
    #puts "Terminating"  # Commented away 2013-07-26, write_to_file instead
    #exit  # Commented away 2013-07-26, write_to_file instead
  end
end

#
# Prints the contents of the val array
#
def pv(val)
  puts "\n*** VAL: *********************************************************"
  val.each_index do |index|
    puts " val[#{index}]="
    pp val[index]
  end
  puts "******************************************************************"
  puts
end

#
# Prints the contents of the tables
#
def pt()
  puts "\n*** TABLES: ******************************************************"
  [@@symbol_table, @@structtag_table, @@uniontag_table, @@enumtag_table, @@typedef_table].each {|t| pp t; puts}
  puts "******************************************************************"
  puts
end

#
# Prints the contents of the _values stack
#
def ps(_values)
  puts "\n*** _VALUES: *****************************************************"
  _values.each_index do |index|
    puts " _values[#{index}]="
    pp _values[index]
  end
  puts "******************************************************************"
  puts
end
